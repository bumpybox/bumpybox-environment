set cut_paste_input [stack 0]
version 11.0 v4
BackdropNode {
inputs 0
name BackdropNode73
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x9bbac4ff
label michael
note_font_size 50
selected true
xpos 12409
ypos 8558
bdwidth 3725
bdheight 8932
z_order -2
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text michael
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
addUserKnob {3 node_position_y l y -STARTLINE}
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {0 0}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode83
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0xe3bb9aff
label kensuke
note_font_size 50
selected true
xpos 12489
ypos 18055
bdwidth 3136
bdheight 8658
z_order -2
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text kensuke
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
addUserKnob {3 node_position_y l y -STARTLINE}
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {0 0}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode54
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0xadad37ff
label "Pools of Light/Gobo Areas"
note_font_size 50
selected true
xpos 13334
ypos 11232
bdwidth 1523
bdheight 1691
z_order -1
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Pools of Light/Gobo Areas"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -1487
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1909
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {1523 1691}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
zorder -1
}
BackdropNode {
inputs 0
name BackdropNode72
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0xadad37ff
label "Pools of Light/Gobo Areas"
note_font_size 50
selected true
xpos 13414
ypos 20455
bdwidth 1523
bdheight 1691
z_order -1
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Pools of Light/Gobo Areas"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -1487
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1909
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {1523 1691}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
zorder -1
}
BackdropNode {
inputs 0
name BackdropNode53
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x9bbac4ff
label "michael (03)"
note_font_size 50
selected true
xpos 15125
ypos 8678
bdwidth 140
bdheight 230
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "michael (03)"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
addUserKnob {3 node_position_y l y -STARTLINE}
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {0 0}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode55
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x4f685901
label "Darken Ramp"
note_font_size 50
selected true
xpos 14860
ypos 10081
bdwidth 450
bdheight 249
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Darken Ramp"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -55
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1668
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {450 249}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode56
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x3c2f3eff
label "Darken Overall"
note_font_size 50
selected true
xpos 14426
ypos 10457
bdwidth 879
bdheight 361
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Darken Overall"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -460
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1755
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {879 361}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode57
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x48394aff
label "Dappled \nLight\nShapes"
note_font_size 50
selected true
xpos 14208
ypos 11419
bdwidth 215
bdheight 453
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Dappled \nLight\nShapes"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -646
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 2177
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {215 453}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode58
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0xad4c44ff
label "Offset Highlight/Shadow"
note_font_size 50
selected true
xpos 13665
ypos 13243
bdwidth 1300
bdheight 1221
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Offset Highlight/Shadow"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -395
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1004
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {1300 1221}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode59
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x48394aff
label "Dappled \nLight\nShapes\n(190_c0040)"
note_font_size 50
selected true
xpos 14494
ypos 11419
bdwidth 303
bdheight 453
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Dappled \nLight\nShapes\n(190_c0040)"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -392
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 2176
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {303 453}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode74
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x4f685901
label "Darken Ramp"
note_font_size 50
selected true
xpos 14940
ypos 19304
bdwidth 450
bdheight 249
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Darken Ramp"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -55
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1668
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {450 249}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode75
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x3c2f3eff
label "Darken Overall"
note_font_size 50
selected true
xpos 14506
ypos 19680
bdwidth 879
bdheight 361
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Darken Overall"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -460
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1755
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {879 361}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode78
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x48394aff
label "Dappled \nLight\nShapes"
note_font_size 50
selected true
xpos 14288
ypos 20642
bdwidth 215
bdheight 453
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Dappled \nLight\nShapes"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -646
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 2177
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {215 453}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode79
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0xad4c44ff
label "Offset Highlight/Shadow"
note_font_size 50
selected true
xpos 13745
ypos 22466
bdwidth 1300
bdheight 1221
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Offset Highlight/Shadow"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -395
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 1004
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {1300 1221}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode80
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x48394aff
label "Dappled \nLight\nShapes\n(190_c0040)"
note_font_size 50
selected true
xpos 14574
ypos 20642
bdwidth 303
bdheight 453
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text "Dappled \nLight\nShapes\n(190_c0040)"
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -392
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 2176
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {303 453}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
inputs 0
name BackdropNode60
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x46443eff
label Masks
note_font_size 50
selected true
xpos 13843
ypos 13914
bdwidth 505
bdheight 456
z_order 1
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text Masks
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -985
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 4588
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {505 456}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
zorder 1
}
BackdropNode {
inputs 0
name BackdropNode61
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x46443eff
label Masks
note_font_size 50
selected true
xpos 13953
ypos 12426
bdwidth 505
bdheight 456
z_order 1
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text Masks
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -985
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 4588
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {505 456}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
zorder 1
}
BackdropNode {
inputs 0
name BackdropNode81
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x46443eff
label Masks
note_font_size 50
selected true
xpos 13923
ypos 23137
bdwidth 493
bdheight 443
z_order 1
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text Masks
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x 13923
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 23137
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {493 443}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
zorder 1
}
BackdropNode {
inputs 0
name BackdropNode82
knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
tile_color 0x46443eff
label Masks
note_font_size 50
selected true
xpos 14033
ypos 21649
bdwidth 505
bdheight 456
z_order 1
addUserKnob {20 Settings}
addUserKnob {43 text l Text}
text Masks
addUserKnob {7 font_size l "Font Size" R 10 100}
font_size 50
addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {26 S01 l " " T " "}
addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
addUserKnob {26 S08 l " " T " "}
addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
oz_border_width 2
addUserKnob {26 S02 l " " T " "}
addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
addUserKnob {26 S03 l " " -STARTLINE T "     "}
addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
addUserKnob {26 S04 l " " -STARTLINE T " "}
addUserKnob {3 sides l "" -STARTLINE}
sides 50
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {26 S05 l " " -STARTLINE T " "}
addUserKnob {26 pos_text l Position -STARTLINE T " "}
addUserKnob {3 node_position_x l x -STARTLINE}
node_position_x -985
addUserKnob {3 node_position_y l y -STARTLINE}
node_position_y 4588
addUserKnob {26 S06 l " " T " "}
addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
sizeNode {505 456}
addUserKnob {26 S07 l " " -STARTLINE T "     "}
addUserKnob {3 zorder l "Z Order" -STARTLINE}
zorder 1
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_01_kbody_Beauty/v005/kensukes_kingdom_q0190_c0100_renderPainting_01_kbody_Beauty_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_01_kbody_Beauty_exr1
tile_color 0x4ecd25ff
selected true
xpos 14411
ypos 18570
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_01_kbody_Beauty
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650b72127d60dc6d9e60c}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_01_kbody_Beauty_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_02_Karm_Beauty/v005/kensukes_kingdom_q0190_c0100_renderPainting_02_Karm_Beauty_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_02_Karm_Beauty_exr1
tile_color 0x4ecd25ff
selected true
xpos 14446
ypos 18077
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_02_Karm_Beauty
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650be2127d60dc6d9e6b3}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_02_Karm_Beauty_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
StickyNote {
inputs 0
name StickyNote31
label "       Darkening Ramp      "
note_font_size 51
selected true
xpos 15374
ypos 10225
}
StickyNote {
inputs 0
name StickyNote32
label "       Character - Paint and Line      "
note_font_size 51
selected true
xpos 15387
ypos 9601
}
StickyNote {
inputs 0
name StickyNote33
label "      Darken Overall      "
note_font_size 51
selected true
xpos 15400
ypos 10609
}
StickyNote {
inputs 0
name StickyNote34
label "      Offset Highlight/Shadow    "
note_font_size 51
selected true
xpos 15428
ypos 14449
}
StickyNote {
inputs 0
name StickyNote35
label "      Gobo/Light Pool Areas      "
note_font_size 51
selected true
xpos 15432
ypos 13009
}
Constant {
inputs 0
channels rgb
color {0.276722 0.216191 0.015795 0}
color_panelDropped true
name Constant14
selected true
xpos 14605
ypos 16365
}
Constant {
inputs 0
channels rgb
color {0.1429034024 0.0845849216 0.005618602503 1}
name Constant17
selected true
xpos 15045
ypos 16365
}
StickyNote {
inputs 0
name StickyNote36
label "Switch\n0-  Pool of Light with Dapple\n1- Pool of Light with no Dapple\n2- Only Dapple\n<centre>    "
note_font_size 21
selected true
xpos 14500
ypos 12298
}
StickyNote {
inputs 0
name StickyNote37
label "      Tint     "
note_font_size 51
selected true
xpos 15435
ypos 16733
}
StickyNote {
inputs 0
name char_name_0
label Michael
note_font_size 200
selected true
xpos 12662
ypos 9334
}
StickyNote {
inputs 0
name StickyNote40
label "       Darkening Ramp      "
note_font_size 51
selected true
xpos 15454
ypos 19448
}
StickyNote {
inputs 0
name StickyNote41
label "       Character - Paint and Line      "
note_font_size 51
selected true
xpos 15467
ypos 18824
}
StickyNote {
inputs 0
name StickyNote42
label "      Darken Overall      "
note_font_size 51
selected true
xpos 15480
ypos 19832
}
StickyNote {
inputs 0
name StickyNote43
label "      Offset Highlight/Shadow    "
note_font_size 51
selected true
xpos 15508
ypos 23672
}
push $cut_paste_input
Noise {
size 1442
zoffset 4.22
lacunarity 5.4
gain 0.75
gamma 0.115
scale 0.66
center {1289 540}
name Noise6
selected true
xpos 14685
ypos 20907
}
Grade {
blackpoint 0.003
whitepoint 0.035
white_clamp true
name Grade9
selected true
xpos 14685
ypos 20955
}
Shuffle {
alpha blue
name Shuffle9
selected true
xpos 14685
ypos 21003
}
Blur {
size 50
name Blur50
selected true
xpos 14685
ypos 20997
}
Grade {
channels rgba
blackpoint 0.016
whitepoint 0.8
white 1.3
name Grade10
selected true
xpos 14685
ypos 21051
}
StickyNote {
inputs 0
name StickyNote44
label "      Gobo/Light Pool Areas      "
note_font_size 51
selected true
xpos 15512
ypos 22232
}
Constant {
inputs 0
channels rgb
color {0.276722 0.216191 0.015795 0}
color_panelDropped true
name Constant22
selected true
xpos 14685
ypos 25588
}
Constant {
inputs 0
channels rgb
color {0.1429034024 0.0845849216 0.005618602503 1}
name Constant23
selected true
xpos 15125
ypos 25588
}
StickyNote {
inputs 0
name StickyNote45
label "Switch\n0-  Pool of Light with Dapple\n1- Pool of Light with no Dapple\n2- Only Dapple\n<centre>    "
note_font_size 21
selected true
xpos 14580
ypos 21521
}
StickyNote {
inputs 0
name char_name_1
label "   Character Name    "
note_font_size 200
selected true
xpos 12742
ypos 18557
}
StickyNote {
inputs 0
name StickyNote46
label "      Tint     "
note_font_size 51
selected true
xpos 15515
ypos 25956
}
Constant {
inputs 0
channels rgb
color {0.3528772295 0.2254241556 0.05006536096 1}
name Constant19
selected true
xpos 14715
ypos 16364
}
Constant {
inputs 0
color {0.6720824242 0.5732651949 0.1212412193 1}
name Constant1
label "BG light\nColour"
selected true
xpos 14816
ypos 16395
dope_sheet true
}
Constant {
inputs 0
channels rgb
color {0.3528772295 0.2254241556 0.05006536096 1}
name Constant25
selected true
xpos 14795
ypos 25588
}
Constant {
inputs 0
color {0.6720824242 0.5732651949 0.1212412193 1}
name Constant2
label "BG light\nColour"
selected true
xpos 14795
ypos 25444
dope_sheet true
}
Constant {
inputs 0
channels rgb
color {0.2767223716 0.1560423076 0.006711174734 0}
name Constant9
selected true
xpos 14935
ypos 16364
}
Noise {
inputs 0
size 1442
zoffset 4.22
lacunarity 5.4
gain 0.75
gamma 0.115
scale 0.66
center {1289 540}
name Noise2
selected true
xpos 14605
ypos 11684
}
Grade {
blackpoint 0.003
whitepoint 0.035
white_clamp true
name Grade4
selected true
xpos 14605
ypos 11732
}
Shuffle {
alpha blue
name Shuffle3
selected true
xpos 14605
ypos 11780
}
Blur {
size 50
name Blur33
selected true
xpos 14605
ypos 11774
}
Grade {
channels rgba
blackpoint 0.016
whitepoint 0.8
white 1.3
name Grade3
selected true
xpos 14605
ypos 11828
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_02_Karm_01_CU_Karm/v005/kensukes_kingdom_q0190_c0100_renderPainting_02_Karm_01_CU_Karm_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_02_Karm_01_CU_Karm_exr1
tile_color 0x4ecd25ff
selected true
xpos 14544
ypos 18385
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_02_Karm_01_CU_Karm
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650c12127d60dc6d9e6ea}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_02_Karm_01_CU_Karm_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_01_kbody_01_CU_Kbody/v005/kensukes_kingdom_q0190_c0100_renderPainting_01_kbody_01_CU_Kbody_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_01_kbody_01_CU_Kbody_exr1
tile_color 0x4ecd25ff
selected true
xpos 14906
ypos 18198
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_01_kbody_01_CU_Kbody
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650b92127d60dc6d9e643}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_01_kbody_01_CU_Kbody_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Merge2 {
inputs 2
name Merge122
selected true
xpos 14906
ypos 18415
}
Dot {
name lighting_cu_input_1
label "\[value name]"
selected true
xpos 14939
ypos 18511
}
Constant {
inputs 0
color {0.024642 0.023807 0.023807 0}
color_panelDropped true
name Constant24
label "\[value color]"
selected true
xpos 14685
ypos 18669
}
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy18
selected true
xpos 14905
ypos 18693
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_02_Karm_03_Karm_paint/v005/kensukes_kingdom_q0190_c0100_renderPainting_02_Karm_03_Karm_paint_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_02_Karm_03_Karm_paint_exr1
tile_color 0x4ecd25ff
selected true
xpos 15056
ypos 18381
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_02_Karm_03_Karm_paint
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650c52127d60dc6d9e758}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_02_Karm_03_Karm_paint_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_02_Karm_02_Karm_sponge_paint/v005/kensukes_kingdom_q0190_c0100_renderPainting_02_Karm_02_Karm_sponge_paint_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_02_Karm_02_Karm_sponge_paint_exr1
tile_color 0x4ecd25ff
selected true
xpos 15058
ypos 18279
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_02_Karm_02_Karm_sponge_paint
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650c32127d60dc6d9e721}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_02_Karm_02_Karm_sponge_paint_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_01_kbody_02_Kbody_paint/v005/kensukes_kingdom_q0190_c0100_renderPainting_01_kbody_02_Kbody_paint_v005.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_01_kbody_02_Kbody_paint_exr1
tile_color 0x4ecd25ff
selected true
xpos 15235
ypos 18142
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_01_kbody_02_Kbody_paint
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650bb2127d60dc6d9e67a}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 5}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_01_kbody_02_Kbody_paint_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Merge2 {
inputs 2
name Merge121
selected true
xpos 15232
ypos 18309
}
Merge2 {
inputs 2
name Merge118
selected true
xpos 15235
ypos 18411
}
PSDMerge {
inputs 2
name PSDMerge19
note_font "Bitstream Vera Sans"
selected true
xpos 15235
ypos 18700
maskChannelInput none
}
Dot {
name Dot156
selected true
xpos 15269
ypos 19231
}
set Ne0475c00 [stack 0]
Dot {
name Dot199
selected true
xpos 12519
ypos 19231
}
Dot {
name Dot200
selected true
xpos 12519
ypos 20575
}
set Ne0475500 [stack 0]
Dot {
name Dot201
selected true
xpos 12519
ypos 22591
}
set Ne0475180 [stack 0]
Dot {
name Dot202
selected true
xpos 12519
ypos 25855
}
Constant {
inputs 0
channels rgb
color {0.276722 0.216191 0.015795 0}
color_panelDropped true
name Constant28
selected true
xpos 14810
ypos 25106
}
Constant {
inputs 0
channels rgb
color {0.2767223716 0.1560423076 0.006711174734 0}
name Constant29
selected true
xpos 14960
ypos 25001
}
Merge2 {
inputs 2
mix 0.5
name Merge78
selected true
xpos 14960
ypos 25129
}
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy19
selected true
xpos 14795
ypos 25845
}
Multiply {
value 0.5
name Multiply7
label "\[value value]"
selected true
xpos 14795
ypos 25982
}
Roto {
inputs 0
output alpha
cliptype none
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup BSpline1 512 bspline
     {{cc
       {f 8192}
       {px
        {1 x41600000 x41900000 x41c80000 x42140000}
        {{a t
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x441a8000 0 1 x41f426f5 1}
       {x4474fff9 x41b400a8 1 x41b400a8 1}
       {x447c8000 -}
       {x446aff59 xc1a50d79 1 xc1a50d79 1}
       {x441a8000 -}}
      {{xc2b80000 0 1 xc1296967 1}
       {xc3599779 xc0f9cca8 1 xc0f9cca8 1}
       {xc3640000 -}
       {xc34bb5f3 x40e50d79 1 x40e50d79 1}
       {xc2b80000 -}}}
        {{a t
       {{1 x3f872b02 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x4422f99a 0 1 xc13e85ea 1}
       {x444a3333 -}
       {x445b1333 x411e1bef 1 x411e1bef 1}
       {x44656000 x40b4444a 1 x40b4444a 1}
       {x4475d556 x40ad333b 1 0 1}}
      {{x43bb999a 0 1 xbe63fdfe 1}
       {x43caad84 xc000b60f 1 xc000b60f 1}
       {x43bee7d3 xc18d444c 1 xc18d444c 1}
       {x425dbbd4 xc1b42188 1 xc1b42188 1}
       {xc237fff0 xbfb5e2d0 1 0 1}}}
        {{a t
       {{1 x3f828f5c -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x447cfffe 0 1 x41280000 1}
       {x448f8fff x41280000 1 x41280000 1}
       {x4494cfff x41280000 1 x41280000 1}
       {x449dffff x41280000 1 x41280000 1}
       {x44adbfff -}}
      {{x4482bfff 0 1 xc151c718 1}
       {x445ae38d xc151c71a 1 xc151c71a 1}
       {x444dc71b xc151c71d 1 xc151c71d 1}
       {x4436d554 xc151c71b 1 xc151c71b 1}
       {x440f7fff -}}}
        {{a t
       {{1 x3f8ac083 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x447b8000 0 1 x41493b14 1}
       {x44911000 x41280000 1 x41280000 1}
       {x44941000 x416f87dd 1 x416f87dd 1}
       {x44a5a5ad x41280000 1 x41280000 1}
       {x44ad0000 -}}
      {{x447f0000 0 1 xbe408e19 1}
       {x4470638d xc151c71e 1 xc151c71e 1}
       {x4447471c xc1cfd7f7 1 xc1cfd7f7 1}
       {x4428f150 xc151c71b 1 xc151c71b 1}
       {x44090000 -}}}
        {{a t
       {{1 x3f91eb85 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x44d70000 0 1 xc188b678 1}
       {x44bda98f xc14995a0 1 xc14995a0 1}
       {x44bb9000 -}
       {x44c8e6c9 x41fb9436 1 x41fb9436 1}
       {x45032000 -}}
      {{x44a40000 0 1 xbf683b7f 1}
       {x44a1b6e4 xc019ef2d 1 xc019ef2d 1}
       {x449ee38f xc169cef4 1 xc169cef4 1}
       {x448d9f1b xc1b58540 1 xc1b58540 1}
       {x44520000 -}}}
        {{a t
       {{1 x3f7ae148 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x44d47fff -}}
      {{x44b63fff -}}}
        {{a t
       {{1 x3f3b645a -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x44943fff -}}
      {{x44c6c000 -}}}
        {{a t
       {{1 x3f051eb8 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x43f40000 -}}
      {{x44af0000 -}}}
        {{a t
       {{1 x3f666666 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{x40000000 -}}
      {{x44abc000 -}}}
        {{a t
       {{1 x3f7ef9db -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{xc2e00000 -}}
      {{x44950000 -}}}
        {{a t
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{xc2fc0000 -}}
      {{x43320000 -}}}
        {{a t
       {{1 x3f8b4396 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{xc2900000 -}}
      {{xc0800000 -}}}
        {{a t
       {{1 x3f9f3b64 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 rp
       {{1 1 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}	 te
       {{1 x40800000 -}
        {x41600000}
        {x41900000}
        {x41c80000}
        {x42140000}}}
      {{xc1600000 -}}
      {{xc3a5fffe -}}}}}     idem}
     {tx 1 x44019d8a x4423d89e}
     {a inv 1 osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 tt x40c00000}}}}}}
toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {1547 648}
colorOverlay {0 0 0 0}
lifetime_type "all frames"
motionblur_shutter_offset_type centred
inverted true
source_black_outside true
name Roto27
selected true
xpos 14025
ypos 23253
}
Blur {
size 68.5
name Blur51
selected true
xpos 14025
ypos 23445
}
push $Ne0475180
Dot {
name Dot203
selected true
xpos 14059
ypos 22591
}
set Ne04bb880 [stack 0]
Group {
name ExpandErode2
knobChanged "import nuke\n\n\nnode=nuke.thisNode()\nf_knob=node\['filter']\nm=node\['method'].getValue()\n\nif int(m) == 1:\n    f_knob.setEnabled(True)\nelse:\n    f_knob.setEnabled(False)\n\nnode.begin()\nall=nuke.allNodes()\n\nfor n in all:\n    if n.Class() == 'FilterErode':\n        n\['filter'].setValue(int(f_knob.getValue()))\n\nnode.end()"
selected true
xpos 14025
ypos 22750
addUserKnob {20 size}
addUserKnob {4 method M {Simple Filter Blur}}
method Filter
addUserKnob {4 filter M {Box Triangle Quadratic Gaussian "" "" "" "" "" ""}}
filter Gaussian
addUserKnob {7 ExpandErodeSize l "Expand/Erode Size" R 0 50}
addUserKnob {41 size_1 l "Blur Size" T Blur1.size}
addUserKnob {26 ""}
addUserKnob {26 Description l "" +STARTLINE T "Use this to expand and errode by the same amount to fill in any gaps \nor holes in mattes and shapes"}
}
Input {
inputs 0
name src
xpos -920
ypos 516
}
set Ne04bb500 [stack 0]
Erode {
channels all
size {{-parent.ExpandErodeSize}}
blur -3
name Erode2
xpos -823
ypos 614
}
Erode {
channels all
size {{parent.ExpandErodeSize}}
name Erode1
xpos -823
ypos 658
}
push $Ne04bb500
FilterErode {
channels all
size {{-(parent.ExpandErodeSize)}}
filter gaussian
name FilterErode2
xpos -920
ypos 614
}
set Ne04baa80 [stack 0]
FilterErode {
channels all
size {{parent.ExpandErodeSize x1 3}}
filter gaussian
name FilterErode1
xpos -920
ypos 658
}
push $Ne04bb500
Dilate {
size {{parent.ExpandErodeSize}}
name Dilate1
xpos -1030
ypos 610
}
Dilate {
size {{-(parent.ExpandErodeSize) x1 -8}}
name Dilate2
xpos -1030
ypos 656
}
Switch {
inputs 3
which {{parent.method}}
name Switch1
xpos -920
ypos 758
addUserKnob {20 User}
}
Blur {
name Blur1
xpos -920
ypos 848
}
Output {
name Output1
xpos -920
ypos 950
}
push $Ne04baa80
Viewer {
frame_range 1-100
name Viewer1
xpos -721
ypos 531
}
end_group
Dot {
name Dot204
selected true
xpos 14059
ypos 22879
}
set Ne04ed180 [stack 0]
Transform {
translate {4 -5}
center {1228 568}
name Transform18
selected true
xpos 14025
ypos 22923
}
Blur {
size 6.4
name Blur52
selected true
xpos 14025
ypos 23013
}
push $Ne04ed180
Dot {
name Dot205
selected true
xpos 14279
ypos 22879
}
Merge2 {
inputs 2
operation stencil
name Merge108
selected true
xpos 14245
ypos 23019
}
Merge2 {
inputs 2
operation mask
name Merge110
selected true
xpos 14245
ypos 23451
}
Grade {
white 1.4
name Grade1
selected true
xpos 14245
ypos 23477
}
Dot {
name Dot206
selected true
xpos 14279
ypos 23551
}
push $Ne04bb880
Dot {
name Dot207
selected true
xpos 14939
ypos 22591
}
Merge2 {
inputs 2
operation mask
name Merge111
selected true
xpos 14905
ypos 23547
}
Dot {
name Dot208
selected true
xpos 14939
ypos 23695
}
Roto {
inputs 0
output alpha
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {1547 648}
colorOverlay {0 0 0 0}
lifetime_type "all frames"
lifetime_start 42
lifetime_end 42
view {}
motionblur_on true
motionblur_shutter_offset_type centred
source_black_outside true
name Roto28
selected true
xpos 14135
ypos 21717
}
Blur {
size 29.5
name Blur53
selected true
xpos 14135
ypos 21909
}
Noise {
inputs 0
size 9.6
lacunarity 3.95
gain 0.595
gamma 0.115
scale 3.4
center {1289 540}
name Noise7
selected true
xpos 14355
ypos 20859
}
Group {
name Fractal_Blur3
selected true
xpos 14355
ypos 20907
addUserKnob {20 User}
addUserKnob {4 output l Output M {rgba alpha}}
addUserKnob {26 ""}
addUserKnob {7 FractalBlur_UserDilate l Spread R 0 200}
FractalBlur_UserDilate 32
addUserKnob {7 FractalBlur_UserGrainSize l "Grain Size" R 0 100}
FractalBlur_UserGrainSize 32.5
addUserKnob {7 FractalBlur_UserContrast l Contrast}
addUserKnob {7 FractalBlur_UserGamma l Gamma R 0 5}
FractalBlur_UserGamma 3.76
addUserKnob {6 FractalBlur_UserBlackWhite l "Make black and white" +STARTLINE}
addUserKnob {7 FractalBlur_UserThreshold l Threshold}
addUserKnob {6 FractalBlur_UserBW l "Clamp output" +STARTLINE}
FractalBlur_UserBW true
addUserKnob {26 ""}
addUserKnob {7 FractalBlur_UserGrainEvolve l "Grain Evolution" t "Keyframe this value to animate the grain" R 0 10}
addUserKnob {26 ""}
addUserKnob {26 instructions l "" +STARTLINE T "Plug a texture into Input2 to use that instead of noise"}
addUserKnob {26 ""}
addUserKnob {26 FractalBlur_Credit l "" +STARTLINE T "Fractal Blur v1.9 by Richard Frazer - www.richardfrazer.com\nmod-v1 by Holger Hummel - www.celluloid-vfx.com"}
}
Input {
inputs 0
name TEXTURE
xpos 1874
ypos -423
number 1
}
Dot {
name Dot2
xpos 1908
ypos -118
}
set Ne0589c00 [stack 0]
Input {
inputs 0
name ALPHA
xpos 1249
ypos -506
}
Dot {
name Dot4
xpos 1283
ypos -413
}
set Ne0589500 [stack 0]
Dot {
name Dot3
xpos 1550
ypos -370
}
set Ne0589180 [stack 0]
Dot {
name Dot1
xpos 1748
ypos -370
}
Shuffle {
red black
green black
blue black
alpha black
name Shuffle10
xpos 1714
ypos -255
}
Noise {
cliptype none
size {{"\[value FractalBlur_UserGrainSize]" i}}
zoffset {{"\[value FractalBlur_UserGrainEvolve]" i}}
center {1024 778}
name Noise1
xpos 1714
ypos -166
}
set Ne0588700 [stack 0]
Switch {
inputs 2
which {{"\[exists parent.input1]"}}
name Switch3
xpos 1714
ypos -122
}
Invert {
name Invert4
xpos 1714
ypos -72
}
push $Ne0589180
Shuffle {
red alpha
green alpha
blue alpha
name Shuffle1
xpos 1516
ypos -333
}
Blur {
size {{"\[value FractalBlur_UserDilate]" i x101 0}}
name Blur1
xpos 1516
ypos -283
}
FilterErode {
channels rgba
size {{"(-\[value FractalBlur_UserDilate])/2" i x1 0}}
filter gaussian
name FilterErode7
xpos 1516
ypos -216
}
Dot {
name Dot10
xpos 1550
ypos -133
}
set Ne05ace00 [stack 0]
Merge2 {
inputs 2
operation minus
name Merge2
xpos 1660
ypos -6
}
Invert {
name Invert3
xpos 1660
ypos 37
}
push $Ne05ace00
Merge2 {
inputs 2
operation multiply
name Merge13
xpos 1516
ypos 72
}
set Ne05ac380 [stack 0]
Clamp {
name Clamp1
xpos 1408
ypos 116
}
Grade {
channels rgba
blackpoint {{FractalBlur_UserThreshold i}}
whitepoint {{FractalBlur_UserThreshold i}}
name Grade1
xpos 1408
ypos 195
}
push $Ne05ac380
Switch {
inputs 2
which {{FractalBlur_UserBlackWhite i x47 1}}
name Switch1
xpos 1516
ypos 249
}
Grade {
channels rgba
blackpoint {{FractalBlur_UserContrast}}
whitepoint {{1-FractalBlur_UserContrast}}
gamma {{FractalBlur_UserGamma x101 0.985}}
black_clamp false
name Grade5
xpos 1516
ypos 329
}
set Ne05e3500 [stack 0]
Clamp {
name Clamp2
xpos 1426
ypos 394
}
push $Ne05e3500
Switch {
inputs 2
which {{FractalBlur_UserBW x47 0}}
name Switch2
xpos 1516
ypos 466
}
Dot {
name Dot6
xpos 1550
ypos 545
}
set Ne05e2a80 [stack 0]
Shuffle {
red alpha
green alpha
blue alpha
name Shuffle2
xpos 1516
ypos 619
}
push $Ne05e2a80
push $Ne0589500
ShuffleCopy {
inputs 2
name ShuffleCopy1
xpos 1249
ypos 575
}
Dot {
name Dot5
xpos 1283
ypos 636
}
Switch {
inputs 2
which {{parent.output}}
name Switch5
xpos 1516
ypos 751
}
Output {
name Output1
xpos 1516
ypos 851
}
push $Ne0589c00
push $Ne0588700
Switch {
inputs 2
which {{parent.altInput}}
name Switch4
xpos 1874
ypos -65
}
end_group
ColorCorrect {
channels all
contrast 2.4
gain 2.14
name ColorCorrect26
selected true
xpos 14355
ypos 20997
}
Blur {
size 30
name Blur54
selected true
xpos 14355
ypos 21045
}
Dot {
name Dot209
selected true
xpos 14389
ypos 21151
}
set Ne0618a80 [stack 0]
Dot {
name Dot210
selected true
xpos 14499
ypos 21151
}
Dot {
name Dot211
selected true
xpos 14499
ypos 21583
}
push $Ne0475500
Dot {
name Dot212
selected true
xpos 13509
ypos 20575
}
set Ne0618000 [stack 0]
Dot {
name Dot213
selected true
xpos 13509
ypos 20959
}
set Ne0649c00 [stack 0]
Dot {
name Dot214
selected true
xpos 13509
ypos 21199
}
push $Ne0649c00
Group {
name ExpandErode3
knobChanged "import nuke\n\n\nnode=nuke.thisNode()\nf_knob=node\['filter']\nm=node\['method'].getValue()\n\nif int(m) == 1:\n    f_knob.setEnabled(True)\nelse:\n    f_knob.setEnabled(False)\n\nnode.begin()\nall=nuke.allNodes()\n\nfor n in all:\n    if n.Class() == 'FilterErode':\n        n\['filter'].setValue(int(f_knob.getValue()))\n\nnode.end()"
selected true
xpos 13585
ypos 20955
addUserKnob {20 size}
addUserKnob {4 method M {Simple Filter Blur}}
method Filter
addUserKnob {4 filter M {Box Triangle Quadratic Gaussian "" "" "" "" "" ""}}
filter Gaussian
addUserKnob {7 ExpandErodeSize l "Expand/Erode Size" R 0 50}
addUserKnob {41 size_1 l "Blur Size" T Blur1.size}
addUserKnob {26 ""}
addUserKnob {26 Description l "" +STARTLINE T "Use this to expand and errode by the same amount to fill in any gaps \nor holes in mattes and shapes"}
}
Input {
inputs 0
name src
xpos -920
ypos 516
}
set Ne0649500 [stack 0]
Erode {
channels all
size {{-parent.ExpandErodeSize}}
blur -3
name Erode2
xpos -823
ypos 614
}
Erode {
channels all
size {{parent.ExpandErodeSize}}
name Erode1
xpos -823
ypos 658
}
push $Ne0649500
FilterErode {
channels all
size {{-(parent.ExpandErodeSize)}}
filter gaussian
name FilterErode2
xpos -920
ypos 614
}
set Ne0648a80 [stack 0]
FilterErode {
channels all
size {{parent.ExpandErodeSize x1 3}}
filter gaussian
name FilterErode1
xpos -920
ypos 658
}
push $Ne0649500
Dilate {
size {{parent.ExpandErodeSize}}
name Dilate1
xpos -1030
ypos 610
}
Dilate {
size {{-(parent.ExpandErodeSize) x1 -8}}
name Dilate2
xpos -1030
ypos 656
}
Switch {
inputs 3
which {{parent.method}}
name Switch1
xpos -920
ypos 758
addUserKnob {20 User}
}
Blur {
name Blur1
xpos -920
ypos 848
}
Output {
name Output1
xpos -920
ypos 950
}
push $Ne0648a80
Viewer {
frame_range 1-100
name Viewer1
xpos -721
ypos 531
}
end_group
FilterErode {
channels all
size 59
filter quadratic
name FilterErode6
selected true
xpos 13585
ypos 20997
}
Blur {
size 22.5
name Blur55
selected true
xpos 13585
ypos 21045
}
Merge2 {
inputs 2
operation mask
name Merge112
selected true
xpos 13585
ypos 21195
}
add_layer {distort01 distort01.red distort01.green distort01.blue distort01.alpha}
Shuffle {
red alpha
green alpha
blue alpha
out distort01
name Shuffle10
selected true
xpos 13585
ypos 21243
}
Roto {
inputs 0
output alpha
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097152}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup Bezier1 512 bezier
     {{cc
       {f 8192}
       {px x42700000
        {x40000000 x40000000}
        {x44e3ffff x448d0001}
        {xc0000000 xc0000000}
        {x41db918f x4199085c}
        {x44d24000 x4486c000}
        {xc1db918e xc199085e}
        {x40ccb5e4 x42635891}
        {x44babfff x44608000}
        {xc0ccb5d2 xc2635891}
        {xc2b80000 x42980000}
        {x44c87fff x441effff}
        {x42b80000 xc2980000}
        {xc30e0000 xc2300000}
        {x44ee0000 x44128000}
        {x430e0000 x42300000}
        {xc2400000 xc2e80000}
        {x450e2000 x44400000}
        {x42400000 x42e80000}
        {x42380000 xc2c40000}
        {x4512a000 x447f8000}
        {xc2380000 x42c40000}
        {x42477791 xc1220505}
        {x4505e000 x448cc000}
        {xc2477792 x412204f0}}}     idem}
     {tx x42700000 x44f05000 x446c2000}
     {a osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 ltn x42700000 ltm x42700000 tt x40800000}}}}}}
toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {1547 648}
colorOverlay {0 0 0 0}
lifetime_type "all frames"
lifetime_start 60
lifetime_end 60
motionblur_shutter_offset_type centred
source_black_outside true
name Roto29
selected true
xpos 14135
ypos 20949
}
Blur {
size 53
name Blur56
selected true
xpos 14135
ypos 20997
}
Dot {
name Dot215
label "Input Matte\nDappled Light Shapes or \nAreas/Pools of Light on Char"
selected true
xpos 14169
ypos 21151
}
Copy {
inputs 2
from0 rgba.alpha
to0 -rgba.alpha
channels distort01
name Copy20
selected true
xpos 14135
ypos 21230
}
IDistort {
uv {distort01.red -distort01.green}
uv_scale 0
name IDistort11
selected true
xpos 14135
ypos 21285
}
set Ne06e5500 [stack 0]
Dot {
name Dot216
selected true
xpos 14169
ypos 21487
}
set Ne06e5180 [stack 0]
Dot {
name Dot217
selected true
xpos 14169
ypos 21583
}
push $Ne06e5180
push $Ne06e5500
EdgeDetectWrapper {
channels rgba
erodesize -10
name EdgeDetect2
selected true
xpos 14245
ypos 21285
}
FilterErode {
channels all
size -37
filter gaussian
name FilterErode7
selected true
xpos 14245
ypos 21333
}
Dot {
name Dot218
selected true
xpos 14279
ypos 21391
}
push $Ne0618a80
Merge2 {
inputs 2
operation mask
name Merge113
selected true
xpos 14355
ypos 21387
}
ChannelMerge {
inputs 2
name ChannelMerge12
selected true
xpos 14355
ypos 21470
}
Switch {
inputs 3
name Switch2
label "\[value which]"
selected true
xpos 14355
ypos 21573
}
Merge2 {
inputs 2
operation mask
name Merge114
selected true
xpos 14355
ypos 21915
disable true
}
Dot {
name Dot219
note_font_size 41
selected true
xpos 14389
ypos 22111
}
push $Ne0618000
Dot {
name Dot220
selected true
xpos 14829
ypos 20575
}
Merge2 {
inputs 2
operation mask
name Merge115
selected true
xpos 14795
ypos 22107
}
Dot {
name Dot221
selected true
xpos 14829
ypos 22255
}
Ramp {
inputs 0
p0 {1350 814}
p1 {1350 -88}
name Ramp4
selected true
xpos 15015
ypos 19397
}
Dot {
name lighting_ramp_input_1
label "Ramp dot"
selected true
xpos 15049
ypos 19471
}
push $Ne0475c00
ColorCorrect {
inputs 1+1
gain 0.24
name ColorCorrect27
label Shadow
selected true
xpos 15235
ypos 19461
}
Grade {
white 0
unpremult -rgba.alpha
mix 0.66
name Grade11
onCreate "node = nuke.thisNode()\nknobs = node.knobs().keys()\nwhitelist = \['mix', 'channels']\nextra = \['mix_luminance']\n\nknobs = knobs + extra\n\nfor knob in knobs:\n    node\[knob].setEnabled(False)\n    if knob in whitelist:\n        node\[knob].setEnabled(True)\n    \n"
label "\[value mix]"
selected true
xpos 15235
ypos 19845
}
Merge2 {
inputs 2
name Merge116
selected true
xpos 15235
ypos 22251
disable true
}
Merge2 {
inputs 2
name Merge117
selected true
xpos 15235
ypos 23691
}
PSDMerge {
inputs 2
name PSDMerge23
note_font "Bitstream Vera Sans"
selected true
xpos 15235
ypos 25996
operation overlay
maskChannelInput none
}
Dot {
name lighting_output_4
label "\[value name]"
selected true
xpos 15269
ypos 26671
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_03_michael_01_CU_michael/v006/kensukes_kingdom_q0190_c0100_renderPainting_03_michael_01_CU_michael_v006.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_03_michael_01_CU_michael_exr1
tile_color 0x4ecd25ff
selected true
xpos 14825
ypos 9075
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_03_michael_01_CU_michael
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650cb2127d60dc6d9e7c8}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 6}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_03_michael_01_CU_michael_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Dot {
name lighting_cu_input_0
label "\[value name]"
selected true
xpos 14859
ypos 9288
}
Constant {
inputs 0
color {0.024642 0.023807 0.023807 0}
color_panelDropped true
name Constant18
label "\[value color]"
selected true
xpos 14605
ypos 9446
}
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy14
selected true
xpos 14825
ypos 9470
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0100/publish/render/renderPainting_03_michael_02_michael_paint/v006/kensukes_kingdom_q0190_c0100_renderPainting_03_michael_02_michael_paint_v006.####.exr
last 51
frame_mode "start at"
frame 1.0
origlast 51
origset true
name Read_renderPainting_03_michael_02_michael_paint_exr1
tile_color 0x4ecd25ff
selected true
xpos 15155
ypos 8798
addUserKnob {20 AvalonTab}
addUserKnob {20 begin l "Avalon data group" n 2}
addUserKnob {26 __divider__ l "" +STARTLINE}
addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
addUserKnob {1 avalon:name l name}
avalon:name renderPainting_03_michael_02_michael_paint
addUserKnob {1 avalon:namespace l namespace}
avalon:namespace q0190_c0100
addUserKnob {26 avalon:loader l loader T LoadSequence}
addUserKnob {26 avalon:representation l representation T 615650ce2127d60dc6d9e7ff}
addUserKnob {26 avalon:id l id T pyblish.avalon.container}
addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
addUserKnob {26 avalon:frameStart l frameStart T 1}
addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0190/q0190_c0100/work/painting/kensukes_kingdom_q0190_c0100_painting_v026.tvpp"}
addUserKnob {26 avalon:version l version T 6}
addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_03_michael_02_michael_paint_exr}
addUserKnob {26 avalon:fps l fps T 24.0}
addUserKnob {26 avalon:author l author T render}
addUserKnob {26 avalon:handleEnd l handleEnd T None}
addUserKnob {26 avalon:handleStart l handleStart T None}
addUserKnob {26 avalon:colorspace l colorspace T None}
addUserKnob {26 avalon:frameEnd l frameEnd T 51}
addUserKnob {20 end l "Avalon data group" n -1}
}
Dot {
name lighting_input_2
label "\[value name]"
selected true
xpos 15189
ypos 8952
}
PSDMerge {
inputs 2
name PSDMerge17
note_font "Bitstream Vera Sans"
selected true
xpos 15155
ypos 9477
maskChannelInput none
}
Dot {
name Dot130
selected true
xpos 15189
ypos 10008
}
set Nd19e0a80 [stack 0]
Dot {
name Dot131
selected true
xpos 12439
ypos 10008
}
Dot {
name Dot132
selected true
xpos 12439
ypos 11352
}
set Nd19e0380 [stack 0]
Dot {
name Dot133
selected true
xpos 12439
ypos 13368
}
set Nd19e0000 [stack 0]
Dot {
name Dot134
selected true
xpos 12439
ypos 16632
}
Constant {
inputs 0
channels rgb
color {0.276722 0.216191 0.015795 0}
color_panelDropped true
name Constant30
selected true
xpos 14686
ypos 16145
}
Constant {
inputs 0
channels rgb
color {0.2767223716 0.1560423076 0.006711174734 0}
name Constant31
selected true
xpos 14836
ypos 16040
}
Merge2 {
inputs 2
mix 0.5
name Merge79
selected true
xpos 14836
ypos 16168
}
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy15
selected true
xpos 14715
ypos 16622
}
Multiply {
value 0.5
name Multiply5
label "\[value value]"
selected true
xpos 14715
ypos 16759
}
Roto {
inputs 0
output alpha
cliptype none
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup BSpline1 512 bspline
     {{cc
       {f 8192}
       {px
        {1 x42480000}
        {{a t
       {{1 x3f7be76d}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x44958000
       {x44958000 -}}
      {x41b00000
       {x41b00000 -}}}
        {{a t
       {{1 x3f92f1aa}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x44a4c000
       {x44a4c000 -}}
      {xc3260000
       {xc3260000 -}}}
        {{a t
       {{1 x3fa56042}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x44c4c000
       {x44c4c000 -}}
      {xc3300000
       {xc3300000 -}}}
        {{a t
       {{1 x3f8624dd}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {{x44f9e0a3 0 1 xbd2a8fac 1}
       {x44f9e0a3 xbd2a8fac 1 0 1}}
      {{xc407b97e 0 1 x3e953b1a 1}
       {xc407b97e x3e953b1a 1 0 1}}}
        {{a t
       {{1 x3f818937}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {{x455d0fc2 0 1 xbdffd0fb 1}
       {x455d0fc2 xbdffd0fb 1 0 1}}
      {{xc383cdcc -}}}
        {{a t
       {{1 x3f9c28f6}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {{x45129c4d 0 1 xbd2a9249 1}
       {x45129c4d xbd2a9249 1 0 1}}
      {{x435d9a46 0 1 xbdaa8cbc 1}
       {x435d9a46 xbdaa8cbc 1 0 1}}}
        {{a t
       {{1 1}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x45002000
       {x45002000 -}}
      {x44168000
       {x44168000 -}}}
        {{a t
       {{1 x3f970a3e}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x4505fe67
       {x4505fe67 xc18761b4 1 0 1}}
      {x446b8000
       {x446b8000 x420586fb 1 0 1}}}
        {{a t
       {{1 x3f666666}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x45099000
       {x45099000 xc1f11746 1 0 1}}
      {x449dd000
       {x449dd000 x42190000 1 0 1}}}
        {{a t
       {{1 x3efdf3b6}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x450a6000
       {x450a6000 -}}
      {x44a38000
       {x44a38000 -}}}
        {{a t
       {{1 x3f25e354}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x44db0000
       {x44db0000 -}}
      {x44a64000
       {x44a64000 -}}}
        {{a t
       {{1 x3f126e97}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x44958000
       {x44958000 -}}
      {x44278000
       {x44278000 -}}}
        {{a t
       {{1 x3f839581}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x44824000
       {x44824000 -}}
      {x42480000
       {x42480000 -}}}}}
      {cc
       {f 8192}
       {px
        {1 x42480000}
        {{a t
       {{1 x3f7be76d}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f92f1aa}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3fa56042}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f8624dd}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f818937}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x443fabbc
       {x443fabbc -}}
      {xc29274cc
       {xc29274cc -}}}
        {{a t
       {{1 x3f9c28f6}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {{x42f4a140 0 1 xbd660a73 1}
       {x42f4a140 xbd660a73 1 0 1}}
      {{x43521585 0 1 xbdc58e0a 1}
       {x43521585 xbdc58e0a 1 0 1}}}
        {{a t
       {{1 1}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f970a3e}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {x4393c288
       {x4393c288 -}}
      {xc390a486
       {xc390a486 -}}}
        {{a t
       {{1 x3f666666}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3efdf3b6}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f25e354}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f126e97}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}
        {{a t
       {{1 x3f839581}
        {x42480000}}	 rp
       {{1 1}
        {x42480000}}	 te
       {{1 x40800000}
        {x42480000}}}
      {0
       {0 -}}
      {0
       {0 -}}}}}}
     {tx x421c0000 x44dee492 x43d32492}
     {a inv 1 osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 ltn x421c0000 ltm x421c0000 tt x40c00000}}}}}}
toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {1547 648}
colorOverlay {0 0 0 0}
lifetime_type "all frames"
lifetime_start 39
lifetime_end 39
motionblur_shutter_offset_type centred
inverted true
source_black_outside true
name Roto17
selected true
xpos 13945
ypos 14030
}
Blur {
size 29.5
name Blur34
selected true
xpos 13945
ypos 14222
}
push $Nd19e0000
Dot {
name Dot135
selected true
xpos 13979
ypos 13368
}
set Nd1a1c700 [stack 0]
Group {
name ExpandErode1
knobChanged "import nuke\n\n\nnode=nuke.thisNode()\nf_knob=node\['filter']\nm=node\['method'].getValue()\n\nif int(m) == 1:\n    f_knob.setEnabled(True)\nelse:\n    f_knob.setEnabled(False)\n\nnode.begin()\nall=nuke.allNodes()\n\nfor n in all:\n    if n.Class() == 'FilterErode':\n        n\['filter'].setValue(int(f_knob.getValue()))\n\nnode.end()"
selected true
xpos 13945
ypos 13527
addUserKnob {20 size}
addUserKnob {4 method M {Simple Filter Blur}}
method Filter
addUserKnob {4 filter M {Box Triangle Quadratic Gaussian "" "" "" "" "" ""}}
filter Gaussian
addUserKnob {7 ExpandErodeSize l "Expand/Erode Size" R 0 50}
addUserKnob {41 size_1 l "Blur Size" T Blur1.size}
addUserKnob {26 ""}
addUserKnob {26 Description l "" +STARTLINE T "Use this to expand and errode by the same amount to fill in any gaps \nor holes in mattes and shapes"}
}
Input {
inputs 0
name src
xpos -920
ypos 516
}
set Nd1a1c380 [stack 0]
Erode {
channels all
size {{-parent.ExpandErodeSize}}
blur -3
name Erode2
xpos -823
ypos 614
}
Erode {
channels all
size {{parent.ExpandErodeSize}}
name Erode1
xpos -823
ypos 658
}
push $Nd1a1c380
FilterErode {
channels all
size {{-(parent.ExpandErodeSize)}}
filter gaussian
name FilterErode2
xpos -920
ypos 614
}
set Nd1a73880 [stack 0]
FilterErode {
channels all
size {{parent.ExpandErodeSize x1 3}}
filter gaussian
name FilterErode1
xpos -920
ypos 658
}
push $Nd1a1c380
Dilate {
size {{parent.ExpandErodeSize}}
name Dilate1
xpos -1030
ypos 610
}
Dilate {
size {{-(parent.ExpandErodeSize) x1 -8}}
name Dilate2
xpos -1030
ypos 656
}
Switch {
inputs 3
which {{parent.method}}
name Switch1
xpos -920
ypos 758
addUserKnob {20 User}
}
Blur {
name Blur1
xpos -920
ypos 848
}
Output {
name Output1
xpos -920
ypos 950
}
push $Nd1a73880
Viewer {
frame_range 1-100
name Viewer1
xpos -721
ypos 531
}
end_group
Dot {
name Dot136
selected true
xpos 13979
ypos 13656
}
set Nd1a72000 [stack 0]
Transform {
translate {-9 -22}
center {1228 568}
black_outside false
name Transform10
selected true
xpos 13945
ypos 13700
}
Blur {
size 20
name Blur35
selected true
xpos 13945
ypos 13790
}
push $Nd1a72000
Dot {
name Dot137
selected true
xpos 14199
ypos 13656
}
Merge2 {
inputs 2
operation stencil
name Merge86
selected true
xpos 14165
ypos 13796
}
Multiply {
value 0.38
name Multiply6
selected true
xpos 14165
ypos 13822
}
Merge2 {
inputs 2
operation mask
name Merge87
selected true
xpos 14165
ypos 14228
}
Dot {
name Dot138
selected true
xpos 14199
ypos 14328
}
push $Nd1a1c700
Dot {
name Dot139
selected true
xpos 14859
ypos 13368
}
Merge2 {
inputs 2
operation mask
name Merge88
selected true
xpos 14825
ypos 14324
}
Dot {
name Dot140
selected true
xpos 14859
ypos 14472
}
Roto {
inputs 0
output alpha
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup BSpline1 512 bspline
     {{cc
       {f 8192}
       {px 1
        {{a t
       {{1 x3f8d4fdf}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44900000 x41f00000}
        {{a t
       {{1 x3f9db22d}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44a90000 x43220000}
        {{a t
       {{1 x3f9374bc}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44c34000 x43830000}
        {{a t
       {{1 x3f989375}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44e4ee62 x44138e92}
        {{a t
       {{1 x3f8bc6a8}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44f80000 x43ee0000}
        {{a t
       {{1 x3f5b22d1}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x4503c000 x43820000}
        {{a t
       {{1 x3f6d9168}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44f34000 x41400000}
        {{a t
       {{1 x3f4ac083}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44dbc000 xc2b40000}
        {{a t
       {{1 x3f3a5e35}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44b24000 xc2cc0000}
        {{a t
       {{1 x3f5d2f1a}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     x44970000 xc2600000}}}
      {cc
       {f 8192}
       {px 1
        {{a t
       {{1 x3f8d4fdf}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f9db22d}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f9374bc}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f989375}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     xc2ac6fd0 x432a0740}
        {{a t
       {{1 x3f8bc6a8}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f5b22d1}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f6d9168}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f4ac083}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f3a5e35}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}
        {{a t
       {{1 x3f5d2f1a}}	 rp
       {{1 1}}	 te
       {{1 x40800000}}}     0 0}}}}
     {tx 1 x44cb2ccd x43050000}
     {a osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 tt x40c00000}}}}}}
toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {1547 648}
colorOverlay {0 0 0 0}
lifetime_type "all frames"
motionblur_shutter_offset_type centred
source_black_outside true
name Roto18
selected true
xpos 14055
ypos 12496
}
Invert {
name Invert1
selected true
xpos 14055
ypos 12558
}
Blur {
size 100
name Blur36
selected true
xpos 14055
ypos 12686
}
Noise {
inputs 0
size 9.6
lacunarity 3.95
gain 0.595
gamma 0.115
scale 3.4
center {1289 540}
name Noise5
selected true
xpos 14275
ypos 11636
}
Group {
name Fractal_Blur2
selected true
xpos 14275
ypos 11684
addUserKnob {20 User}
addUserKnob {4 output l Output M {rgba alpha}}
addUserKnob {26 ""}
addUserKnob {7 FractalBlur_UserDilate l Spread R 0 200}
FractalBlur_UserDilate 32
addUserKnob {7 FractalBlur_UserGrainSize l "Grain Size" R 0 100}
FractalBlur_UserGrainSize 32.5
addUserKnob {7 FractalBlur_UserContrast l Contrast}
addUserKnob {7 FractalBlur_UserGamma l Gamma R 0 5}
FractalBlur_UserGamma 3.76
addUserKnob {6 FractalBlur_UserBlackWhite l "Make black and white" +STARTLINE}
addUserKnob {7 FractalBlur_UserThreshold l Threshold}
addUserKnob {6 FractalBlur_UserBW l "Clamp output" +STARTLINE}
FractalBlur_UserBW true
addUserKnob {26 ""}
addUserKnob {7 FractalBlur_UserGrainEvolve l "Grain Evolution" t "Keyframe this value to animate the grain" R 0 10}
addUserKnob {26 ""}
addUserKnob {26 instructions l "" +STARTLINE T "Plug a texture into Input2 to use that instead of noise"}
addUserKnob {26 ""}
addUserKnob {26 FractalBlur_Credit l "" +STARTLINE T "Fractal Blur v1.9 by Richard Frazer - www.richardfrazer.com\nmod-v1 by Holger Hummel - www.celluloid-vfx.com"}
}
Input {
inputs 0
name TEXTURE
xpos 1874
ypos -423
number 1
}
Dot {
name Dot2
xpos 1908
ypos -118
}
set Ne0d23500 [stack 0]
Input {
inputs 0
name ALPHA
xpos 1249
ypos -506
}
Dot {
name Dot4
xpos 1283
ypos -413
}
set Ne0d22e00 [stack 0]
Dot {
name Dot3
xpos 1550
ypos -370
}
set Ne0d22a80 [stack 0]
Dot {
name Dot1
xpos 1748
ypos -370
}
Shuffle {
red black
green black
blue black
alpha black
name Shuffle10
xpos 1714
ypos -255
}
Noise {
cliptype none
size {{"\[value FractalBlur_UserGrainSize]" i}}
zoffset {{"\[value FractalBlur_UserGrainEvolve]" i}}
center {1024 778}
name Noise1
xpos 1714
ypos -166
}
set Ne0d22000 [stack 0]
Switch {
inputs 2
which {{"\[exists parent.input1]"}}
name Switch3
xpos 1714
ypos -122
}
Invert {
name Invert4
xpos 1714
ypos -72
}
push $Ne0d22a80
Shuffle {
red alpha
green alpha
blue alpha
name Shuffle1
xpos 1516
ypos -333
}
Blur {
size {{"\[value FractalBlur_UserDilate]" i x101 0}}
name Blur1
xpos 1516
ypos -283
}
FilterErode {
channels rgba
size {{"(-\[value FractalBlur_UserDilate])/2" i x1 0}}
filter gaussian
name FilterErode7
xpos 1516
ypos -216
}
Dot {
name Dot10
xpos 1550
ypos -133
}
set Ne0d4e700 [stack 0]
Merge2 {
inputs 2
operation minus
name Merge2
xpos 1660
ypos -6
}
Invert {
name Invert3
xpos 1660
ypos 37
}
push $Ne0d4e700
Merge2 {
inputs 2
operation multiply
name Merge13
xpos 1516
ypos 72
}
set Ne0c9bc00 [stack 0]
Clamp {
name Clamp1
xpos 1408
ypos 116
}
Grade {
channels rgba
blackpoint {{FractalBlur_UserThreshold i}}
whitepoint {{FractalBlur_UserThreshold i}}
name Grade1
xpos 1408
ypos 195
}
push $Ne0c9bc00
Switch {
inputs 2
which {{FractalBlur_UserBlackWhite i x47 1}}
name Switch1
xpos 1516
ypos 249
}
Grade {
channels rgba
blackpoint {{FractalBlur_UserContrast}}
whitepoint {{1-FractalBlur_UserContrast}}
gamma {{FractalBlur_UserGamma x101 0.985}}
black_clamp false
name Grade5
xpos 1516
ypos 329
}
set Ne0c9ae00 [stack 0]
Clamp {
name Clamp2
xpos 1426
ypos 394
}
push $Ne0c9ae00
Switch {
inputs 2
which {{FractalBlur_UserBW x47 0}}
name Switch2
xpos 1516
ypos 466
}
Dot {
name Dot6
xpos 1550
ypos 545
}
set Ne0c9a380 [stack 0]
Shuffle {
red alpha
green alpha
blue alpha
name Shuffle2
xpos 1516
ypos 619
}
push $Ne0c9a380
push $Ne0d22e00
ShuffleCopy {
inputs 2
name ShuffleCopy1
xpos 1249
ypos 575
}
Dot {
name Dot5
xpos 1283
ypos 636
}
Switch {
inputs 2
which {{parent.output}}
name Switch5
xpos 1516
ypos 751
}
Output {
name Output1
xpos 1516
ypos 851
}
push $Ne0d23500
push $Ne0d22000
Switch {
inputs 2
which {{parent.altInput}}
name Switch4
xpos 1874
ypos -65
}
end_group
ColorCorrect {
channels all
contrast 2.4
gain 2.14
name ColorCorrect20
selected true
xpos 14275
ypos 11774
}
Blur {
size 20
name Blur37
selected true
xpos 14275
ypos 11822
}
Dot {
name Dot141
selected true
xpos 14309
ypos 11928
}
set Nd1b4bc00 [stack 0]
Dot {
name Dot142
selected true
xpos 14419
ypos 11928
}
Dot {
name Dot143
selected true
xpos 14419
ypos 12360
}
push $Nd19e0380
Dot {
name Dot144
selected true
xpos 13429
ypos 11352
}
set Nd1b4b180 [stack 0]
Dot {
name Dot145
selected true
xpos 13429
ypos 11736
}
set Nd1b4ae00 [stack 0]
Dot {
name Dot146
selected true
xpos 13429
ypos 11976
}
push $Nd1b4ae00
Group {
name ExpandErode
knobChanged "import nuke\n\n\nnode=nuke.thisNode()\nf_knob=node\['filter']\nm=node\['method'].getValue()\n\nif int(m) == 1:\n    f_knob.setEnabled(True)\nelse:\n    f_knob.setEnabled(False)\n\nnode.begin()\nall=nuke.allNodes()\n\nfor n in all:\n    if n.Class() == 'FilterErode':\n        n\['filter'].setValue(int(f_knob.getValue()))\n\nnode.end()"
selected true
xpos 13505
ypos 11732
addUserKnob {20 size}
addUserKnob {4 method M {Simple Filter Blur}}
method Filter
addUserKnob {4 filter M {Box Triangle Quadratic Gaussian "" "" "" "" "" ""}}
filter Gaussian
addUserKnob {7 ExpandErodeSize l "Expand/Erode Size" R 0 50}
addUserKnob {41 size_1 l "Blur Size" T Blur1.size}
addUserKnob {26 ""}
addUserKnob {26 Description l "" +STARTLINE T "Use this to expand and errode by the same amount to fill in any gaps \nor holes in mattes and shapes"}
}
Input {
inputs 0
name src
xpos -920
ypos 516
}
set Nd1b4a700 [stack 0]
Erode {
channels all
size {{-parent.ExpandErodeSize}}
blur -3
name Erode2
xpos -823
ypos 614
}
Erode {
channels all
size {{parent.ExpandErodeSize}}
name Erode1
xpos -823
ypos 658
}
push $Nd1b4a700
FilterErode {
channels all
size {{-(parent.ExpandErodeSize)}}
filter gaussian
name FilterErode2
xpos -920
ypos 614
}
set Nd1b75c00 [stack 0]
FilterErode {
channels all
size {{parent.ExpandErodeSize x1 3}}
filter gaussian
name FilterErode1
xpos -920
ypos 658
}
push $Nd1b4a700
Dilate {
size {{parent.ExpandErodeSize}}
name Dilate1
xpos -1030
ypos 610
}
Dilate {
size {{-(parent.ExpandErodeSize) x1 -8}}
name Dilate2
xpos -1030
ypos 656
}
Switch {
inputs 3
which {{parent.method}}
name Switch1
xpos -920
ypos 758
addUserKnob {20 User}
}
Blur {
name Blur1
xpos -920
ypos 848
}
Output {
name Output1
xpos -920
ypos 950
}
push $Nd1b75c00
Viewer {
frame_range 1-100
name Viewer1
xpos -721
ypos 531
}
end_group
FilterErode {
channels all
size 59
filter quadratic
name FilterErode3
selected true
xpos 13505
ypos 11774
}
Blur {
size 22.5
name Blur38
selected true
xpos 13505
ypos 11822
}
Merge2 {
inputs 2
operation mask
name Merge89
selected true
xpos 13505
ypos 11972
}
Shuffle {
red alpha
green alpha
blue alpha
out distort01
name Shuffle4
selected true
xpos 13505
ypos 12020
}
Roto {
inputs 0
output alpha
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup Bezier1 512 bezier
     {{cc
       {f 8192}
       {px
        {1 x41800000 x42480000}
        {{x40000000
       {x 2
        {x40000000 -}}}
      {x40000000
       {x 2
        {x40000000 -}}}}
        {{x44b84000
       {x 2
        {x44b84000 -}}}
      {x4487c001
       {x 2
        {x4487c001 -}}}}
        {{xc0000000
       {x 2
        {xc0000000 -}}}
      {xc0000000
       {x 2
        {xc0000000 -}}}}
        {{x41db918f
       {x 2
        {x41db918f -}}}
      {x41990820
       {x 2
        {x41990820 -}}}}
        {{x44a68001
       {x 2
        {x44a68001 -}}}
      {x44818000
       {x 2
        {x44818000 -}}}}
        {{xc1db918e
       {x 2
        {xc1db918e -}}}
      {xc1990840
       {x 2
        {xc1990840 -}}}}
        {{x40ccb5e4
       {x 2
        {x40ccb5e4 -}}}
      {x42635891
       {x 2
        {x42635891 -}}}}
        {{x448f0000
       {x 2
        {x448f0000 -}}}
      {x44560000
       {x 2
        {x44560000 -}}}}
        {{xc0ccb5d2
       {x 2
        {xc0ccb5d2 -}}}
      {xc2635891
       {x 2
        {xc2635891 -}}}}
        {{xc2e58438
       {x 2
        {xc2e58438 -}}}
      {x4202e122
       {x 2
        {x4202e122 -}}}}
        {{x448c3333
       {x 2
        {x448c3333 -}}}
      {xc2e73330
       {x 2
        {xc2e73330 -}}}}
        {{x43d33334
       {x 2
        {x43d33334 -}}}
      {xc2f0ccd0
       {x 2
        {xc2f0ccd0 -}}}}
        {{xc22de8a0
       {x 2
        {xc22de8a0 -}}}
      {xc30e2940
       {x 2
        {xc30e2940 -}}}}
        {{x44ca199b
       {x 2
        {x44ca199b -}}}
      {x43b2d99a
       {x 2
        {x43b2d99a -}}}}
        {{x43383328
       {x 2
        {x43383328 -}}}
      {x44169333
       {x 2
        {x44169333 -}}}}
        {{{x 2
        {xc1434100 -}}
       {xc1434100 xbd4823c4 1 0 1}}
      {{x 2
        {xc2f9e378 -}}
       {xc2f9e378 x3ba38000 1 0 1}}}
        {{{x 2
        {x44e8eccc -}}
       {x44e8eccc x3dd8d697 1 0 1}}
      {{x44653331 -}}}
        {{{x 2
        {x41ae6680 -}}
       {x41ae6680 x3db4b4b5 1 0 1}}
      {{x435f333c -}}}
        {{x42380000
       {x 2
        {x42380000 -}}}
      {xc2c40000
       {x 2
        {xc2c40000 -}}}}
        {{{x44e37334 -}}
      {{x 2
        {x44a24cce -}}
       {x44a24cce xbdd8d697 1 0 1}}}
        {{xc2380000
       {x 2
        {xc2380000 -}}}
      {x42c40000
       {x 2
        {x42c40000 -}}}}
        {{x42477791
       {x 2
        {x42477791 -}}}
      {xc1220505
       {x 2
        {xc1220505 -}}}}
        {{x44d03fff
       {x 2
        {x44d03fff -}}}
      {x44a48ccc
       {x 2
        {x44a48ccc -}}}}
        {{xc2477792
       {x 2
        {xc2477792 -}}}
      {x412204f0
       {x 2
        {x412204f0 -}}}}}}
      {cc
       {f 8192}
       {px
        {1 x41800000 x42480000}
        {{x40000000
       {x 2
        {x40000000 -}}}
      {x40000000
       {x 2
        {x40000000 -}}}}
        {{0
       {x 2
        {0 -}}}
      {0
       {x 2
        {0 -}}}}
        {{xc0000000
       {x 2
        {xc0000000 -}}}
      {xc0000000
       {x 2
        {xc0000000 -}}}}
        {{x41db918f
       {x 2
        {x41db918f -}}}
      {x41990820
       {x 2
        {x41990820 -}}}}
        {{0
       {x 2
        {0 -}}}
      {0
       {x 2
        {0 -}}}}
        {{xc1db918e
       {x 2
        {xc1db918e -}}}
      {xc1990840
       {x 2
        {xc1990840 -}}}}
        {{x40ccb5e4
       {x 2
        {x40ccb5e4 -}}}
      {x42635891
       {x 2
        {x42635891 -}}}}
        {{0
       {x 2
        {0 -}}}
      {0
       {x 2
        {0 -}}}}
        {{xc0ccb5d2
       {x 2
        {xc0ccb5d2 -}}}
      {xc2635891
       {x 2
        {xc2635891 -}}}}
        {{xc2e58438
       {x 2
        {xc2e58438 -}}}
      {x4202e122
       {x 2
        {x4202e122 -}}}}
        {{0
       {x 2
        {0 -}}}
      {0
       {x 2
        {0 -}}}}
        {{x43d33334
       {x 2
        {x43d33334 -}}}
      {xc2f0ccd0
       {x 2
        {xc2f0ccd0 -}}}}
        {{xc22de8a0
       {x 2
        {xc22de8a0 -}}}
      {xc30e2940
       {x 2
        {xc30e2940 -}}}}
        {{x426dea80
       {x 2
        {x426dea80 -}}}
      {xc115a3e0
       {x 2
        {xc115a3e0 -}}}}
        {{x43383328
       {x 2
        {x43383328 -}}}
      {x44169333
       {x 2
        {x44169333 -}}}}
        {{{x 2
        {xc1434100 -}}
       {xc1434100 xbd4823c4 1 0 1}}
      {{x 2
        {xc2f9e378 -}}
       {xc2f9e378 x3ba38000 1 0 1}}}
        {{{x 2
        {x42467a40 -}}
       {x42467a40 xbdb2ff0f 1 0 1}}
      {{x 2
        {xc09b0600 -}}
       {xc09b0600 x3c0bcf0f 1 0 1}}}
        {{{x 2
        {x41ae6680 -}}
       {x41ae6680 x3db4b4b5 1 0 1}}
      {{x435f333c -}}}
        {{x42380000
       {x 2
        {x42380000 -}}}
      {xc2c40000
       {x 2
        {xc2c40000 -}}}}
        {{0
       {x 2
        {0 -}}}
      {0
       {x 2
        {0 -}}}}
        {{xc2380000
       {x 2
        {xc2380000 -}}}
      {x42c40000
       {x 2
        {x42c40000 -}}}}
        {{x42477791
       {x 2
        {x42477791 -}}}
      {xc1220505
       {x 2
        {xc1220505 -}}}}
        {{0
       {x 2
        {0 -}}}
      {0
       {x 2
        {0 -}}}}
        {{xc2477792
       {x 2
        {xc2477792 -}}}
      {x412204f0
       {x 2
        {x412204f0 -}}}}}}}
     {tx x42700000 x44f05000 x446c2000}
     {a osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 ltn x42700000 ltm x42700000 tt x40800000}}}}}}
toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_ripple true
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {1547 648}
colorOverlay {0 0 0 0}
lifetime_type "all frames"
lifetime_start 60
lifetime_end 60
motionblur_shutter_offset_type centred
source_black_outside true
name Roto19
selected true
xpos 14055
ypos 11726
}
Blur {
size 53
name Blur39
selected true
xpos 14055
ypos 11774
}
Dot {
name Dot147
label "Input Matte\nDappled Light Shapes or \nAreas/Pools of Light on Char"
selected true
xpos 14089
ypos 11928
}
Copy {
inputs 2
from0 rgba.alpha
to0 -rgba.alpha
channels distort01
name Copy16
selected true
xpos 14055
ypos 12007
}
IDistort {
uv {distort01.red -distort01.green}
uv_scale 0
name IDistort2
selected true
xpos 14055
ypos 12062
}
set Nd1bb6700 [stack 0]
Dot {
name Dot148
selected true
xpos 14089
ypos 12264
}
set Nd1bb6380 [stack 0]
Dot {
name Dot149
selected true
xpos 14089
ypos 12360
}
push $Nd1bb6380
push $Nd1bb6700
EdgeDetectWrapper {
channels rgba
erodesize -10
name EdgeDetect1
selected true
xpos 14165
ypos 12062
}
FilterErode {
channels all
size -37
filter gaussian
name FilterErode5
selected true
xpos 14165
ypos 12110
}
Dot {
name Dot150
selected true
xpos 14199
ypos 12168
}
push $Nd1b4bc00
Merge2 {
inputs 2
operation mask
name Merge90
selected true
xpos 14275
ypos 12164
}
ChannelMerge {
inputs 2
name ChannelMerge4
selected true
xpos 14275
ypos 12247
}
Switch {
inputs 3
name Switch1
label "\[value which]"
selected true
xpos 14275
ypos 12350
}
Merge2 {
inputs 2
operation mask
name Merge91
selected true
xpos 14275
ypos 12692
}
Dot {
name Dot151
note_font_size 41
selected true
xpos 14309
ypos 12888
}
push $Nd1b4b180
Dot {
name Dot152
selected true
xpos 14749
ypos 11352
}
Merge2 {
inputs 2
operation mask
name Merge92
selected true
xpos 14715
ypos 12884
}
Dot {
name Dot153
selected true
xpos 14749
ypos 13032
}
Ramp {
inputs 0
p0 {1350 814}
p1 {1350 -88}
name Ramp9
selected true
xpos 14935
ypos 10174
}
Dot {
name lighting_ramp_input_0
label "Ramp dot"
selected true
xpos 14969
ypos 10248
}
push $Nd19e0a80
ColorCorrect {
inputs 1+1
gain 0.3
name ColorCorrect21
label Shadow
selected true
xpos 15155
ypos 10238
}
Grade {
white 0
unpremult -rgba.alpha
mix 0.66
name Grade8
onCreate "node = nuke.thisNode()\nknobs = node.knobs().keys()\nwhitelist = \['mix', 'channels']\nextra = \['mix_luminance']\n\nknobs = knobs + extra\n\nfor knob in knobs:\n    node\[knob].setEnabled(False)\n    if knob in whitelist:\n        node\[knob].setEnabled(True)\n    \n"
label "\[value mix]"
selected true
xpos 15155
ypos 10622
}
Merge2 {
inputs 2
name Merge93
selected true
xpos 15155
ypos 13028
}
Merge2 {
inputs 2
name Merge94
selected true
xpos 15155
ypos 14468
}
PSDMerge {
inputs 2
name PSDMerge18
note_font "Bitstream Vera Sans"
selected true
xpos 15155
ypos 16773
operation overlay
maskChannelInput none
}
Dot {
name lighting_output_2
label "\[value name]"
selected true
xpos 15189
ypos 17448
}
push 0
Merge2 {
inputs 2
name Merge109
selected true
xpos 16616
ypos 17444
}
Merge2 {
inputs 2
name Merge123
selected true
xpos 16616
ypos 26667
}
Constant {
inputs 0
channels rgb
color {0.2767223716 0.1560423076 0.006711174734 0}
name Constant21
selected true
xpos 14994
ypos 25585
}
ColorCorrect {
gain {0.9 1 1 1}
gain_panelDropped true
name ColorCorrect1
selected true
xpos 14994
ypos 25657
}
Read {
inputs 0
file Y:/kensukes_kingdom/episodes/film/q0190/q0190_c0170/work/compositing/renders/nuke/renderCompositingMain/renderCompositingMain.####.exr
format "2578 1080 0 0 2578 1080 1 kensukes_kingdom"
last 944349
frame_mode "start at"
frame 1.0
origlast 944349
origset true
colorspace linear
name Read2
selected true
xpos 16956
ypos 26525
}
