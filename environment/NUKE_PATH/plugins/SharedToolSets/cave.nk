set cut_paste_input [stack 0]
version 11.0 v4
BackdropNode {
 inputs 0
 name BackdropNode17
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x362f33ff
 note_font_size 50
 selected true
 xpos 21308
 ypos -5812
 bdwidth 3725
 bdheight 8003
 z_order -2
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 addUserKnob {3 node_position_y l y -STARTLINE}
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {0 0}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode11
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x426d6301
 label Background
 note_font_size 50
 selected true
 xpos 19051
 ypos -9403
 bdwidth 6905
 bdheight 3448
 z_order -1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text Background
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -1416
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 1583
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {6905 3448}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder -1
}
BackdropNode {
 inputs 0
 name BackdropNode13
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0xadad37ff
 label "Pools of Light/Gobo Areas"
 note_font_size 50
 selected true
 xpos 22225
 ypos -3550
 bdwidth 1538
 bdheight 1872
 z_order -1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Pools of Light/Gobo Areas"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x 2141
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y -1151
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {1538 1872}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder -1
}
BackdropNode {
 inputs 0
 name BackdropNode16
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x48394aff
 label "Dappled \nLight\nShapes"
 note_font_size 50
 selected true
 xpos 23107
 ypos -3369
 bdwidth 215
 bdheight 453
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Dappled \nLight\nShapes"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -646
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 2177
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {215 453}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode18
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x3c2f3eff
 label "Darken Overall"
 note_font_size 50
 selected true
 xpos 23325
 ypos -4187
 bdwidth 879
 bdheight 361
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Darken Overall"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -460
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 1755
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {879 361}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode21
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0xad4c44ff
 label "Offset Highlight/Shadow"
 note_font_size 50
 selected true
 xpos 22564
 ypos -1401
 bdwidth 1349
 bdheight 1579
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Offset Highlight/Shadow"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -430
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 1021
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {1349 1579}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode23
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x41474aff
 label "Shadow Ground Shape - "
 note_font_size 50
 selected true
 xpos 21693
 ypos -8732
 bdwidth 1180
 bdheight 1626
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Shadow Ground Shape - "
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -251
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 2234
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {1180 1626}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode27
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x41474aff
 label "Shadow Ground Shape - "
 note_font_size 50
 selected true
 xpos 23013
 ypos -8732
 bdwidth 1180
 bdheight 1626
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Shadow Ground Shape - "
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -251
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 2234
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {1180 1626}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode28
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x7d9252ff
 label "m (01)"
 note_font_size 50
 selected true
 xpos 23030
 ypos -2754
 bdwidth 140
 bdheight 230
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "m (01)"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 addUserKnob {3 node_position_y l y -STARTLINE}
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {0 0}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode29
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x41474aff
 label "Shadow Ground Shape - "
 note_font_size 50
 selected true
 xpos 20373
 ypos -8732
 bdwidth 1180
 bdheight 1626
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Shadow Ground Shape - "
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -251
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 2234
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {1180 1626}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode30
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x48394aff
 label "Dappled \nLight\nShapes\n(190_c0040)"
 note_font_size 50
 selected true
 xpos 23393
 ypos -3369
 bdwidth 303
 bdheight 453
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Dappled \nLight\nShapes\n(190_c0040)"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -392
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 2176
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {303 453}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode31
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x4f685901
 label "Darken Ramp"
 note_font_size 50
 selected true
 xpos 23759
 ypos -4563
 bdwidth 450
 bdheight 249
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Darken Ramp"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -55
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 1668
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {450 249}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
}
BackdropNode {
 inputs 0
 name BackdropNode32
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x393136ff
 label Mask/Stencil
 note_font_size 50
 selected true
 xpos 23437
 ypos -7637
 bdwidth 332
 bdheight 204
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text Mask/Stencil
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x 173
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 3508
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {332 204}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode33
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x335b9601
 label "Distort Shadow"
 note_font_size 50
 selected true
 xpos 22083
 ypos -8181
 bdwidth 400
 bdheight 428
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Distort Shadow"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -776
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y -131
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {400 428}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode34
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x46443eff
 label Masks
 note_font_size 50
 selected true
 xpos 22852
 ypos -2266
 bdwidth 505
 bdheight 456
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text Masks
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -985
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 4588
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {505 456}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode35
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x46443eff
 label Masks
 note_font_size 50
 selected true
 xpos 22742
 ypos -730
 bdwidth 573
 bdheight 854
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text Masks
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -252
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 1692
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {573 854}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode36
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x393136ff
 label Mask/Stencil
 note_font_size 50
 selected true
 xpos 22117
 ypos -7637
 bdwidth 332
 bdheight 204
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text Mask/Stencil
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x 173
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 3508
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {332 204}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode37
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x335b9601
 label "Distort Shadow"
 note_font_size 50
 selected true
 xpos 20763
 ypos -8181
 bdwidth 400
 bdheight 428
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Distort Shadow"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -776
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y -131
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {400 428}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode38
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x393136ff
 label Mask/Stencil
 note_font_size 50
 selected true
 xpos 20797
 ypos -7637
 bdwidth 332
 bdheight 204
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text Mask/Stencil
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x 173
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y 3508
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {332 204}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
BackdropNode {
 inputs 0
 name BackdropNode39
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title']:\n        if text=='':\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+title\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+title\n            else:\n                newLabel=title\n        else:\n            if node\['alignment'].getValue()==1:\n                newLabel='<p align=center>'+text\n            elif node\['alignment'].getValue()==2:\n                newLabel='<p align=right>'+text\n            else:\n                newLabel=text\n\n        node\['label'].setValue(newLabel)\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x335b9601
 label "Distort Shadow"
 note_font_size 50
 selected true
 xpos 23403
 ypos -8181
 bdwidth 400
 bdheight 428
 z_order 1
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text "Distort Shadow"
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 michael l "<img src=\"michael.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[155,186,196],'michael',None)"}
 addUserKnob {22 kensuke l "<img src=\"kensuke.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[227,187,154],'kensuke',None)"}
 addUserKnob {22 dad l "<img src=\"dad.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[163,185,159],'dad',None)"}
 addUserKnob {22 mum l "<img src=\"mum.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[235,193,119],'mum',None)"}
 addUserKnob {22 becky l "<img src=\"becky.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[156,135,176],'becky',None)"}
 addUserKnob {22 stella l "<img src=\"stella.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[214,214,214],'stella',None)"}
 addUserKnob {22 parrot l "<img src=\"parrot.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[14,117,136],'parrot',None)"}
 addUserKnob {22 poacher l "<img src=\"poacher.png\">" -STARTLINE T "import oz_backdrop\noz_backdrop.setCharacter(\[103,84,52],'poacher',None)"}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {22 colorandom l " <img src=\"ColorBars.png\">" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (r*255,g*255,b*255,1),16) )\n"}
 addUserKnob {22 red l " <img src=\"F_r.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.0, 0.65, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 orange l " <img src=\"F_o.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.07, 0.6, 0.75]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 yellow l " <img src=\"F_y.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.16, 0.57, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 green l " <img src=\"F_g.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.33, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 cyan l " <img src=\"F_c.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.46, 0.8, 0.7]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 blue l " <img src=\"F_b.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.6, 0.7, 0.76]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 darkblue l " <img src=\"F_db.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.67, 0.74, 0.6]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 magenta l " <img src=\"F_m.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.8, 0.74, 0.65]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {22 pink l " <img src=\"F_p.png\">" -STARTLINE T "import colorsys\nn=nuke.thisNode()\nR,G,B= \[0.92, 0.74, 0.8]\nR,G,B=colorsys.hsv_to_rgb(R,G,B)\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (R*255,G*255,B*255,255), 16 ))\n"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {4 oz_appearance l appearance -STARTLINE M {Fill Border}}
 addUserKnob {7 oz_border_width l width -STARTLINE R 0 10}
 oz_border_width 2
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"F_scalep.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"F_scalem.png\">" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except Exception,e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"oz_encompass.png\">" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -776
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y -131
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l Size -STARTLINE R 0 100}
 sizeNode {400 428}
 addUserKnob {26 S07 l " " -STARTLINE T "     "}
 addUserKnob {3 zorder l "Z Order" -STARTLINE}
 zorder 1
}
Constant {
 inputs 0
 channels rgb
 color {0.2767223716 0.1560423076 0.006711174734 0}
 name Constant2
 selected true
 xpos 23834
 ypos 1721
}
StickyNote {
 inputs 0
 name StickyNote4
 label "       Darkening Ramp      "
 note_font_size 51
 selected true
 xpos 24273
 ypos -4419
}
StickyNote {
 inputs 0
 name StickyNote7
 label "       Character - Paint and Line      "
 note_font_size 51
 selected true
 xpos 24286
 ypos -5043
}
StickyNote {
 inputs 0
 name StickyNote11
 label "      Darken Overall      "
 note_font_size 51
 selected true
 xpos 24299
 ypos -4035
}
StickyNote {
 inputs 0
 name StickyNote12
 label "      Offset Highlight/Shadow    "
 note_font_size 51
 selected true
 xpos 24327
 ypos -195
}
StickyNote {
 inputs 0
 name StickyNote13
 label "      Gobo/Light Pool Areas      "
 note_font_size 51
 selected true
 xpos 24331
 ypos -1635
}
Constant {
 inputs 0
 channels rgb
 color {0.276722 0.216191 0.015795 0}
 color_panelDropped true
 name Constant3
 selected true
 xpos 23504
 ypos 1721
}
Constant {
 inputs 0
 channels rgb
 color {0.1429034024 0.0845849216 0.005618602503 1}
 name Constant7
 selected true
 xpos 23944
 ypos 1721
}
StickyNote {
 inputs 0
 name StickyNote14
 label "      Tint     "
 note_font_size 51
 selected true
 xpos 24313
 ypos 2109
}
push $cut_paste_input
Noise {
 size 1442
 zoffset 4.22
 lacunarity 5.4
 gain 0.75
 gamma 0.115
 scale 0.66
 center {1289 540}
 name Noise1
 selected true
 xpos 23504
 ypos -3104
}
Grade {
 blackpoint 0.003
 whitepoint 0.035
 white_clamp true
 name Grade2
 selected true
 xpos 23504
 ypos -3056
}
Shuffle {
 alpha blue
 name Shuffle4
 selected true
 xpos 23504
 ypos -3008
}
Blur {
 size 50
 name Blur7
 selected true
 xpos 23504
 ypos -3014
}
Grade {
 channels rgba
 blackpoint 0.016
 whitepoint 0.8
 white 1.3
 name Grade3
 selected true
 xpos 23504
 ypos -2960
}
StickyNote {
 inputs 0
 name StickyNote16
 label "Switch\n0-  Pool of Light with Dapple\n1- Pool of Light with no Dapple\n2- Only Dapple\n<centre>    "
 note_font_size 21
 selected true
 xpos 23399
 ypos -2538
}
StickyNote {
 inputs 0
 name char_name_1
 label "   Character Name    "
 note_font_size 200
 selected true
 xpos 21606
 ypos -5310
}
StickyNote {
 inputs 0
 name StickyNote15
 label "Cuts out the shadow shape from\nLIGHTLAYER"
 selected true
 xpos 24624
 ypos -6543
}
Transform {
 inputs 0
 translate {410 232}
 center {400 -188}
 name Transform8
 selected true
 xpos 25747
 ypos 3005
}
Read {
 inputs 0
 file "Y:/kensukes_kingdom/library/effectsfootage/2d/01. Atmospheres/Atmosphere_07.mov"
 format "2048 1152 0 0 2048 1152 1 "
 last 301
 origlast 301
 origset true
 name Read9
 selected true
 xpos 26464
 ypos -9337
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0190/publish/image/image02_unlit_tmp/v001/kensukes_kingdom_q0350_c0190_image02_unlit_tmp_v001.png
 origset true
 name LoadImage_png1
 tile_color 0x4ecd25ff
 selected true
 xpos 23756
 ypos 2233
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name image02_unlit_tmp
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0190
 addUserKnob {26 avalon:loader l loader T LoadImage}
 addUserKnob {26 avalon:representation l representation T 622a1a45d38c903b7b636704}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0190/work/background/kensukes_kingdom_q0350_c0190_background_v002.psd"}
 addUserKnob {26 avalon:version l version T 1}
 addUserKnob {26 avalon:objectName l objectName T LoadImage_png}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T obliv}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 1}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Grade {
 channels alpha
 blackpoint 0.4
 name Grade1
 selected true
 xpos 23756
 ypos 2353
}
Invert {
 name Invert4
 selected true
 xpos 23756
 ypos 2560
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0190/publish/render/renderPainting_01_michael_01_cu_michael/v002/kensukes_kingdom_q0350_c0190_renderPainting_01_michael_01_cu_michael_v002.####.exr
 last 47
 frame_mode "start at"
 frame 1.0
 origlast 47
 origset true
 name Read_renderPainting_01_michael_01_cu_michael_exr1
 tile_color 0x4ecd25ff
 selected true
 xpos 23640
 ypos -5463
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name renderPainting_01_michael_01_cu_michael
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0190
 addUserKnob {26 avalon:loader l loader T LoadSequence}
 addUserKnob {26 avalon:representation l representation T 61f3e07ff6bfd0f88c89dea8}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0190/work/painting/kensukes_kingdom_q0350_c0190_painting_v011.tvpp"}
 addUserKnob {26 avalon:version l version T 2}
 addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_01_michael_01_cu_michael_exr}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T eiria}
 addUserKnob {26 avalon:handleEnd l handleEnd T 0}
 addUserKnob {26 avalon:handleStart l handleStart T 0}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 47}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Dot {
 name lighting_cu_input_1
 label "\[value name]"
 selected true
 xpos 23758
 ypos -5356
}
Constant {
 inputs 0
 color {0.024642 0.023807 0.023807 0}
 color_panelDropped true
 name Constant8
 label "\[value color]"
 selected true
 xpos 23504
 ypos -5198
}
Copy {
 inputs 2
 from0 rgba.alpha
 to0 rgba.alpha
 name Copy1
 selected true
 xpos 23724
 ypos -5174
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0190/publish/render/renderPainting_01_michael_02_michael_paint/v002/kensukes_kingdom_q0350_c0190_renderPainting_01_michael_02_michael_paint_v002.####.exr
 last 47
 frame_mode "start at"
 frame 1.0
 origlast 47
 origset true
 name Read_renderPainting_01_michael_02_michael_paint_exr1
 tile_color 0x4ecd25ff
 selected true
 xpos 24070
 ypos -5801
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name renderPainting_01_michael_02_michael_paint
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0190
 addUserKnob {26 avalon:loader l loader T LoadSequence}
 addUserKnob {26 avalon:representation l representation T 61f3e082f6bfd0f88c89dedb}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0190/work/painting/kensukes_kingdom_q0350_c0190_painting_v011.tvpp"}
 addUserKnob {26 avalon:version l version T 2}
 addUserKnob {26 avalon:objectName l objectName T Read_renderPainting_01_michael_02_michael_paint_exr}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T eiria}
 addUserKnob {26 avalon:handleEnd l handleEnd T 0}
 addUserKnob {26 avalon:handleStart l handleStart T 0}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 47}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Dot {
 name lighting_input_1
 label "\[value name]"
 selected true
 xpos 24088
 ypos -5692
}
PSDMerge {
 inputs 2
 name PSDMerge3
 note_font "Bitstream Vera Sans"
 selected true
 xpos 24054
 ypos -5167
 maskChannelInput none
}
Dot {
 name Dot22
 selected true
 xpos 24088
 ypos -4636
}
set Nf3e3bc00 [stack 0]
Dot {
 name Dot23
 selected true
 xpos 21338
 ypos -4636
}
Dot {
 name Dot24
 selected true
 xpos 21338
 ypos -3436
}
set Nf3e3b500 [stack 0]
Dot {
 name Dot25
 selected true
 xpos 21338
 ypos -1276
}
set Nf3e3b180 [stack 0]
Dot {
 name Dot26
 selected true
 xpos 21338
 ypos 1988
}
Constant {
 inputs 0
 channels rgb
 color {0.3724914789 0.3772259653 0.3652715385 1}
 name Constant26
 selected true
 xpos 23614
 ypos 1595
}
Copy {
 inputs 2
 from0 rgba.alpha
 to0 rgba.alpha
 name Copy2
 selected true
 xpos 23614
 ypos 1978
}
Multiply {
 value 0.5
 name Multiply2
 label "\[value value]"
 selected true
 xpos 23614
 ypos 2115
}
Ramp {
 inputs 0
 p0 {960 260}
 p1 {{p0.x x14 336} 110}
 type smooth1
 name bottom_0
 selected true
 xpos 22866
 ypos -202
}
Ramp {
 p0 {960 1040}
 p1 {{p0.x x14 557.2000122} 1190}
 type smooth1
 name top_0
 selected true
 xpos 22866
 ypos -124
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup BSpline1 512 bspline
     {{cc
       {f 8192}
       {px
        {x40400000 x40a00000 x40e00000 x41100000 x41300000 x41500000 x41700000 x41800000 x41880000 x41980000}
        {{a t
       {{x40400000 x3f7fe5cb}
        {x40a00000 x3f7fe5cb -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44ed1b79
       {x44dd8379 0 1 xc1aa59b0 1}
       {x44d84b56 xc1a059c0 1 xc1a059c0 1}
       {x44d37ddd -}
       {x44d4e528 x40e79400 1 x40e79400 1}
       {x44d71c2d x41291f80 1 x41291f80 1}
       {x44da2e24 x417e8100 1 x417e8100 1}
       {x44dd1333 x41bea4c0 1 x41bea4c0 1}
       {x44e0234a x3fd55400 1 x3fd55400 1}
       {x44e046d8 -}}
      {x443682b5
       {x444402b5 0 1 xc18a3ee8 1}
       {x443be583 xc161f720 1 xc161f720 1}
       {x4435e343 -}
       {x4436f0bc x40286b80 1 x40286b80 1}
       {x443884f1 x407f7000 1 x407f7000 1}
       {x443aee7c x40cbfa00 1 x40cbfa00 1}
       {x443d4ccd x4133a620 1 x4133a620 1}
       {x44408bad -}
       {x444031da xbf86bc80 1 0 1}}}
        {{a t
       {{x40400000 x3f7ef9db}
        {x40a00000 x3f7ef9db -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44ec2409
       {x44dc8c09 0 1 xc1ad5530 1}
       {x44d753e6 xc19a62c0 1 xc19a62c0 1}
       {x44d2e5dd -}
       {x44d44d28 x40e79400 1 x40e79400 1}
       {x44d6842d x41291f80 1 x41291f80 1}
       {x44d99624 x417e8100 1 x417e8100 1}
       {x44dc7b33 x41c71080 1 x41c71080 1}
       {x44dfcea8 x40ff7080 1 x40ff7080 1}
       {x44e078f3 -}}
      {x443a28a2
       {x4447a8a2 0 1 xc189e514 1}
       {x443f8b70 xc1635e70 1 xc1635e70 1}
       {x443972bb -}
       {x443a8034 x40286b80 1 x40286b80 1}
       {x443c1469 x407f7000 1 x407f7000 1}
       {x443e7df4 x40cbfa00 1 x40cbfa00 1}
       {x4440dc45 x4129d300 1 x4129d300 1}
       {x4443cc8c -}
       {x4442d587 xc03943c0 1 0 1}}}
        {{a t
       {{x40400000 x3f7e0dec}
        {x40a00000 x3f7e0dec -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44ea9ace
       {x44db02ce 0 1 xc1ad5530 1}
       {x44d5caab xc19a62c0 1 xc19a62c0 1}
       {x44d15ca2 -}
       {x44d2c3ed x40e79400 1 x40e79400 1}
       {x44d4faf2 x41291f80 1 x41291f80 1}
       {x44d80ce9 x418dc12b 1 x418dc12b 1}
       {x44dba000 x41d98b20 1 x41d98b20 1}
       {x44ded942 x40b0d780 1 x40b0d780 1}
       {x44df4f27 -}}
      {x443d66a4
       {x444ae6a4 0 1 xc189e514 1}
       {x4442c972 xc1635e70 1 xc1635e70 1}
       {x443cb0bd -}
       {x443dbe36 x40286b80 1 x40286b80 1}
       {x443f526b x407f7000 1 x407f7000 1}
       {x4441bbf6 x409f1055 1 x409f1055 1}
       {x44430ccd x4115b500 1 x4115b500 1}
       {x4446699e -}
       {x44464bad xbeb3a600 1 0 1}}}
        {{a t
       {{x40400000 x3f7e5c8f}
        {x40a00000 x3f7e5c8f -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44e90d26
       {x44d97526 0 1 xc1ad5530 1}
       {x44d43d03 xc19a62c0 1 xc19a62c0 1}
       {x44cfcefa -}
       {x44d13645 x40e79400 1 x40e79400 1}
       {x44d36d4a x41291f80 1 x41291f80 1}
       {x44d67f41 x418fa040 1 x418fa040 1}
       {x44da28cd x41d73460 1 x41d73460 1}
       {x44dd38e4 x3fd55400 1 x3fd55400 1}
       {x44dd5c72 -}}
      {x443e2ec1
       {x444baec1 0 1 xc189e514 1}
       {x4443918f xc1635e70 1 xc1635e70 1}
       {x443d78da -}
       {x443e8653 x40286b80 1 x40286b80 1}
       {x44401a88 x407f7000 1 x407f7000 1}
       {x44428413 x40deb080 1 x40deb080 1}
       {x444552ab x4141af00 1 x4141af00 1}
       {x4448918b -}
       {x444837b8 xbf86bc80 1 0 1}}}
        {{a t
       {{x40400000 x3f7f4883}
        {x40a00000 x3f7f4883 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44e6ef3c
       {x44d7573c 0 1 xc1b050b8 1}
       {x44d21f19 xc1946bb0 1 xc1946bb0 1}
       {x44ce1081 -}
       {x44cf77cc x40e79400 1 x40e79400 1}
       {x44d1aed1 x41291f80 1 x41291f80 1}
       {x44d4c0c8 x4191f715 1 x4191f715 1}
       {x44d88666 x41d3b220 1 x41d3b220 1}
       {x44db5e59 -}
       {x44db119f xbfe62e00 1 0 1}}
      {x443d6f9f
       {x444aef9f 0 1 xc1887dc8 1}
       {x4442d26d xc168fba0 1 xc168fba0 1}
       {x443c5fe5 -}
       {x443d6d5e x40286b80 1 x40286b80 1}
       {x443f0193 x407f7000 1 x407f7000 1}
       {x44416b1e x40d73455 1 x40d73455 1}
       {x44440ccd x413df100 1 x413df100 1}
       {x44475aa6 -}
       {x44471ec4 xbf33a600 1 0 1}}}
        {{a t
       {{x40400000 x3f7e9102}
        {x40a00000 x3f7e9102 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44e64809
       {x44d6b009 0 1 xc1ad5530 1}
       {x44d177e6 xc19a62c0 1 xc19a62c0 1}
       {x44cd09dd -}
       {x44ce7128 x40e79400 1 x40e79400 1}
       {x44d0a82d x41291f80 1 x41291f80 1}
       {x44d3ba24 x41910795 1 x41910795 1}
       {x44d77488 x41d51980 1 x41d51980 1}
       {x44da62f0 -}
       {x44da4320 xbf3ee000 1 0 1}}
      {x443a9a8a
       {x44481a8a 0 1 xc189e514 1}
       {x443ffd58 xc1635e70 1 xc1635e70 1}
       {x4439e4a3 -}
       {x443af21c x40286b80 1 x40286b80 1}
       {x443c8651 x407f7000 1 x407f7000 1}
       {x443eefdc x40daf280 1 x40daf280 1}
       {x4441a800 x413fd020 1 x413fd020 1}
       {x4444ee5d -}
       {x4444a382 xbf609100 1 0 1}}}
        {{a t
       {{x40400000 x3f7fe5c7}
        {x40a00000 x3f7fe5c7 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44e509bd
       {x44d571bd 0 1 xc1a5f6e0 1}
       {x44d0399a xc1a91f60 1 xc1a91f60 1}
       {x44cadfc7 -}
       {x44cc4712 x40e79400 1 x40e79400 1}
       {x44ce7e17 x41291f80 1 x41291f80 1}
       {x44d1900e x418fa040 1 x418fa040 1}
       {x44d5399a x41d06bc0 1 x41d06bc0 1}
       {x44d8136c -}
       {x44d7ca70 xbfdaf400 1 0 1}}
      {x44333742
       {x4440b742 0 1 xc18a11fc 1}
       {x44389a10 xc162aad0 1 xc162aad0 1}
       {x44328c95 -}
       {x44339a0e x40286b80 1 x40286b80 1}
       {x44352e43 x407f7000 1 x407f7000 1}
       {x443797ce x40deb080 1 x40deb080 1}
       {x443a6666 x4137dbe0 1 x4137dbe0 1}
       {x443d56ad -}
       {x443c5fa8 xc03943c0 1 0 1}}}
        {{a t
       {{x40400000 x3f7fcb91}
        {x40a00000 x3f7fcb91 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44e3843d
       {x44d3ec3d 0 1 xc1a650c8 1}
       {x44cee103 xc1979430 1 xc1979430 1}
       {x44ca72fa -}
       {x44cbda45 x40e79400 1 x40e79400 1}
       {x44ce114a x41291f80 1 x41291f80 1}
       {x44d12341 x418fa040 1 x418fa040 1}
       {x44d4cccd x41d73460 1 x41d73460 1}
       {x44d7dce4 x3fd55400 1 x3fd55400 1}
       {x44d80072 -}}
      {x442ca3f2
       {x443a23f2 0 1 xc1270488 1}
       {x4434bee4 xc137dc30 1 xc137dc30 1}
       {x442ea62f -}
       {x442fb3a8 x40286b80 1 x40286b80 1}
       {x443147dd x407f7000 1 x407f7000 1}
       {x4433b168 x40deb080 1 x40deb080 1}
       {x44368000 x4141af00 1 x4141af00 1}
       {x4439bee0 -}
       {x4439650d xbf86bc80 1 0 1}}}
        {{a t
       {{x40400000 x3f84a8c1}
        {x40a00000 x3f84a8c1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44e67df3
       {x44d6e5f3 0 1 xc1ad5530 1}
       {x44d1add0 xc19a62c0 1 xc19a62c0 1}
       {x44cd3fc7 -}
       {x44cea712 x40e79400 1 x40e79400 1}
       {x44d0de17 x41291f80 1 x41291f80 1}
       {x44d3f00e x418fa040 1 x418fa040 1}
       {x44d7999a x41d73460 1 x41d73460 1}
       {x44daa9b1 x3fd55400 1 x3fd55400 1}
       {x44dacd3f -}}
      {x442b9c16
       {x44391c16 0 1 xc189e514 1}
       {x4430fee4 xc1635e70 1 xc1635e70 1}
       {x442ae62f -}
       {x442bf3a8 x40286b80 1 x40286b80 1}
       {x442d87dd x407f7000 1 x407f7000 1}
       {x442ff168 x40deb080 1 x40deb080 1}
       {x4432c000 x4141af00 1 x4141af00 1}
       {x4435fee0 -}
       {x4435a50d xbf86bc80 1 0 1}}}
        {{a t
       {{x40400000 x3f8068db}
        {x40a00000 x3f8068db -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44eb3126
       {x44db9926 0 1 xc1ad5530 1}
       {x44d66103 xc19a62c0 1 xc19a62c0 1}
       {x44d1f2fa -}
       {x44d35a45 x40e79400 1 x40e79400 1}
       {x44d5914a x41291f80 1 x41291f80 1}
       {x44d8a341 x418fa040 1 x418fa040 1}
       {x44dc4ccd x41d73460 1 x41d73460 1}
       {x44df5ce4 x3fd55400 1 x3fd55400 1}
       {x44df8072 -}}
      {x442be8e3
       {x443968e3 0 1 xc189e514 1}
       {x44314bb1 xc1635e70 1 xc1635e70 1}
       {x442b32fc -}
       {x442c4075 x40286b80 1 x40286b80 1}
       {x442dd4aa x407f7000 1 x407f7000 1}
       {x44303e35 x40deb080 1 x40deb080 1}
       {x44330ccd x4141af00 1 x4141af00 1}
       {x44364bad -}
       {x4435f1da xbf86bc80 1 0 1}}}
        {{a t
       {{x40400000 x3f804ea6}
        {x40a00000 x3f804ea6 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44eccf3c
       {x44dd373c 0 1 xc1ad5530 1}
       {x44d7ff19 xc19a62c0 1 xc19a62c0 1}
       {x44d39110 -}
       {x44d4f85b x40e79400 1 x40e79400 1}
       {x44d72f60 x41291f80 1 x41291f80 1}
       {x44da4157 x417e8100 1 x417e8100 1}
       {x44dd2666 x41bea4c0 1 x41bea4c0 1}
       {x44e0367d x3fd55400 1 x3fd55400 1}
       {x44e05a0b -}}
      {x4430192a
       {x443d992a 0 1 xc189e514 1}
       {x44357bf8 xc1635e70 1 xc1635e70 1}
       {x442f6343 -}
       {x443070bc x40286b80 1 x40286b80 1}
       {x443204f1 x407f7000 1 x407f7000 1}
       {x44346e7c x40cbfa00 1 x40cbfa00 1}
       {x4436cccd x4133a620 1 x4133a620 1}
       {x443a0bad -}
       {x4439b1da xbf86bc80 1 0 1}}}
        {{a t
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 rp
       {{x40400000 1}
        {x40a00000 1 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}	 te
       {{x40400000 x40800000}
        {x40a00000 x40800000 -}
        {x40e00000}
        {x41100000}
        {x41300000}
        {x41500000}
        {x41700000}
        {x41800000}
        {x41880000}
        {x41980000}}}
      {x44ecbc09
       {x44dd2409 0 1 xc1ad5530 1}
       {x44d7ebe6 xc19a62c0 1 xc19a62c0 1}
       {x44d37ddd -}
       {x44d4e528 x40e79400 1 x40e79400 1}
       {x44d71c2d x41291f80 1 x41291f80 1}
       {x44da2e24 x417e8100 1 x417e8100 1}
       {x44dd1333 x41bea4c0 1 x41bea4c0 1}
       {x44e0234a x3fd55400 1 x3fd55400 1}
       {x44e046d8 -}}
      {x443525f7
       {x4442a5f7 0 1 xc189e514 1}
       {x443a88c5 xc1635e70 1 xc1635e70 1}
       {x44347010 -}
       {x44357d89 x40286b80 1 x40286b80 1}
       {x443711be x407f7000 1 x407f7000 1}
       {x44397b49 x40cbfa00 1 x40cbfa00 1}
       {x443bd99a x4133a620 1 x4133a620 1}
       {x443f187a -}
       {x443ebea7 xbf86bc80 1 0 1}}}}}     idem}
     {tx x41800000 x44d9e998 x443c6223}
     {a inv 1 osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 ltn x41800000 ltm x41800000 tt x40c00000}}}}}}
 toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 lifetime_start 16
 lifetime_end 16
 motionblur_shutter_offset_type centred
 inverted true
 source_black_outside true
 name Roto4
 selected true
 xpos 22844
 ypos -615
}
FrameHold {
 first_frame 1
 increment 2
 name FrameHold3
 selected true
 xpos 22844
 ypos -577
}
Blur {
 size 2
 name Blur8
 selected true
 xpos 22844
 ypos -422
}
push $Nf3e3b180
Dot {
 name Dot27
 selected true
 xpos 22878
 ypos -1276
}
set N281cf180 [stack 0]
Group {
 name ExpandErode2
 knobChanged "import nuke\n\n\nnode=nuke.thisNode()\nf_knob=node\['filter']\nm=node\['method'].getValue()\n\nif int(m) == 1:\n    f_knob.setEnabled(True)\nelse:\n    f_knob.setEnabled(False)\n\nnode.begin()\nall=nuke.allNodes()\n\nfor n in all:\n    if n.Class() == 'FilterErode':\n        n\['filter'].setValue(int(f_knob.getValue()))\n\nnode.end()"
 selected true
 xpos 22844
 ypos -1136
 addUserKnob {20 size}
 addUserKnob {4 method M {Simple Filter Blur}}
 method Filter
 addUserKnob {4 filter M {Box Triangle Quadratic Gaussian "" "" "" "" "" ""}}
 addUserKnob {7 ExpandErodeSize l "Expand/Erode Size" R 0 50}
 addUserKnob {41 size_1 l "Blur Size" T Blur1.size}
 addUserKnob {26 ""}
 addUserKnob {26 Description l "" +STARTLINE T "Use this to expand and errode by the same amount to fill in any gaps \nor holes in mattes and shapes"}
}
 Input {
  inputs 0
  name src
  xpos -920
  ypos 516
 }
set N281cee00 [stack 0]
 Erode {
  channels all
  size {{-parent.ExpandErodeSize}}
  blur -3
  name Erode2
  xpos -823
  ypos 614
 }
 Erode {
  channels all
  size {{parent.ExpandErodeSize}}
  name Erode1
  xpos -823
  ypos 658
 }
push $N281cee00
 FilterErode {
  channels all
  size {{-(parent.ExpandErodeSize)}}
  name FilterErode2
  xpos -920
  ypos 614
 }
set N281ce380 [stack 0]
 FilterErode {
  channels all
  size {{parent.ExpandErodeSize x1 3}}
  name FilterErode1
  xpos -920
  ypos 658
 }
push $N281cee00
 Dilate {
  size {{parent.ExpandErodeSize}}
  name Dilate1
  xpos -1030
  ypos 610
 }
 Dilate {
  size {{-(parent.ExpandErodeSize) x1 -8}}
  name Dilate2
  xpos -1030
  ypos 656
 }
 Switch {
  inputs 3
  which {{parent.method}}
  name Switch1
  xpos -920
  ypos 758
  addUserKnob {20 User}
 }
 Blur {
  name Blur1
  xpos -920
  ypos 848
 }
 Output {
  name Output1
  xpos -920
  ypos 950
 }
push $N281ce380
 Viewer {
  frame_range 1-100
  name Viewer1
  xpos -721
  ypos 531
 }
end_group
Dot {
 name Dot28
 selected true
 xpos 22878
 ypos -988
}
set N864caa80 [stack 0]
Transform {
 translate {-2 -6}
 center {1228 568}
 name Transform4
 selected true
 xpos 22844
 ypos -944
}
Blur {
 size 6.4
 name Blur9
 selected true
 xpos 22844
 ypos -854
}
push $N864caa80
Dot {
 name Dot29
 selected true
 xpos 23098
 ypos -988
}
Merge2 {
 inputs 2
 operation stencil
 name Merge14
 selected true
 xpos 23064
 ypos -848
}
Merge2 {
 inputs 2
 operation mask
 name Merge15
 selected true
 xpos 23064
 ypos -416
 disable true
}
Merge2 {
 inputs 2
 operation stencil
 name Merge16
 selected true
 xpos 23064
 ypos -124
 disable true
}
Dot {
 name Dot30
 selected true
 xpos 23098
 ypos 68
}
push $N281cf180
Dot {
 name Dot31
 selected true
 xpos 23758
 ypos -1276
}
Merge2 {
 inputs 2
 operation mask
 name Merge22
 selected true
 xpos 23724
 ypos 64
}
Dot {
 name Dot32
 selected true
 xpos 23758
 ypos 212
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 lifetime_start 42
 lifetime_end 42
 view {}
 motionblur_on true
 motionblur_shutter_offset_type centred
 source_black_outside true
 name Roto18
 selected true
 xpos 22954
 ypos -2102
}
Blur {
 size 29.5
 name Blur10
 selected true
 xpos 22954
 ypos -2006
}
push $Nf3e3b500
Dot {
 name Dot33
 selected true
 xpos 22328
 ypos -3436
}
set Neb46bc00 [stack 0]
Dot {
 name Dot34
 selected true
 xpos 22328
 ypos -2716
}
set Neb46b880 [stack 0]
Dot {
 name Dot35
 selected true
 xpos 22328
 ypos -2476
}
push $Neb46b880
Group {
 name ExpandErode3
 knobChanged "import nuke\n\n\nnode=nuke.thisNode()\nf_knob=node\['filter']\nm=node\['method'].getValue()\n\nif int(m) == 1:\n    f_knob.setEnabled(True)\nelse:\n    f_knob.setEnabled(False)\n\nnode.begin()\nall=nuke.allNodes()\n\nfor n in all:\n    if n.Class() == 'FilterErode':\n        n\['filter'].setValue(int(f_knob.getValue()))\n\nnode.end()"
 selected true
 xpos 22624
 ypos -2720
 addUserKnob {20 size}
 addUserKnob {4 method M {Simple Filter Blur}}
 method Filter
 addUserKnob {4 filter M {Box Triangle Quadratic Gaussian "" "" "" "" "" ""}}
 filter Gaussian
 addUserKnob {7 ExpandErodeSize l "Expand/Erode Size" R 0 50}
 addUserKnob {41 size_1 l "Blur Size" T Blur1.size}
 addUserKnob {26 ""}
 addUserKnob {26 Description l "" +STARTLINE T "Use this to expand and errode by the same amount to fill in any gaps \nor holes in mattes and shapes"}
}
 Input {
  inputs 0
  name src
  xpos -920
  ypos 516
 }
set Neb46b180 [stack 0]
 Erode {
  channels all
  size {{-parent.ExpandErodeSize}}
  blur -3
  name Erode2
  xpos -823
  ypos 614
 }
 Erode {
  channels all
  size {{parent.ExpandErodeSize}}
  name Erode1
  xpos -823
  ypos 658
 }
push $Neb46b180
 FilterErode {
  channels all
  size {{-(parent.ExpandErodeSize)}}
  filter gaussian
  name FilterErode2
  xpos -920
  ypos 614
 }
set Neb46a700 [stack 0]
 FilterErode {
  channels all
  size {{parent.ExpandErodeSize x1 3}}
  filter gaussian
  name FilterErode1
  xpos -920
  ypos 658
 }
push $Neb46b180
 Dilate {
  size {{parent.ExpandErodeSize}}
  name Dilate1
  xpos -1030
  ypos 610
 }
 Dilate {
  size {{-(parent.ExpandErodeSize) x1 -8}}
  name Dilate2
  xpos -1030
  ypos 656
 }
 Switch {
  inputs 3
  which {{parent.method}}
  name Switch1
  xpos -920
  ypos 758
  addUserKnob {20 User}
 }
 Blur {
  name Blur1
  xpos -920
  ypos 848
 }
 Output {
  name Output1
  xpos -920
  ypos 950
 }
push $Neb46a700
 Viewer {
  frame_range 1-100
  name Viewer1
  xpos -721
  ypos 531
 }
end_group
FilterErode {
 channels all
 size 59
 filter quadratic
 name FilterErode2
 selected true
 xpos 22624
 ypos -2678
}
Blur {
 size 22.5
 name Blur27
 selected true
 xpos 22624
 ypos -2630
}
Merge2 {
 inputs 2
 operation mask
 name Merge23
 selected true
 xpos 22624
 ypos -2480
}
add_layer {distort01 distort01.red distort01.green distort01.blue distort01.alpha}
Shuffle {
 red alpha
 green alpha
 blue alpha
 out distort01
 name Shuffle7
 selected true
 xpos 22624
 ypos -2432
}
Noise {
 inputs 0
 size 9.6
 lacunarity 3.95
 gain 0.595
 gamma 0.115
 scale 3.4
 center {1289 540}
 name Noise3
 selected true
 xpos 23174
 ypos -3152
}
Group {
 name Fractal_Blur2
 selected true
 xpos 23174
 ypos -3104
 addUserKnob {20 User}
 addUserKnob {4 output l Output M {rgba alpha}}
 addUserKnob {26 ""}
 addUserKnob {7 FractalBlur_UserDilate l Spread R 0 200}
 FractalBlur_UserDilate 32
 addUserKnob {7 FractalBlur_UserGrainSize l "Grain Size" R 0 100}
 FractalBlur_UserGrainSize 32.5
 addUserKnob {7 FractalBlur_UserContrast l Contrast}
 addUserKnob {7 FractalBlur_UserGamma l Gamma R 0 5}
 FractalBlur_UserGamma 3.76
 addUserKnob {6 FractalBlur_UserBlackWhite l "Make black and white" +STARTLINE}
 addUserKnob {7 FractalBlur_UserThreshold l Threshold}
 addUserKnob {6 FractalBlur_UserBW l "Clamp output" +STARTLINE}
 FractalBlur_UserBW true
 addUserKnob {26 ""}
 addUserKnob {7 FractalBlur_UserGrainEvolve l "Grain Evolution" t "Keyframe this value to animate the grain" R 0 10}
 addUserKnob {26 ""}
 addUserKnob {26 instructions l "" +STARTLINE T "Plug a texture into Input2 to use that instead of noise"}
 addUserKnob {26 ""}
 addUserKnob {26 FractalBlur_Credit l "" +STARTLINE T "Fractal Blur v1.9 by Richard Frazer - www.richardfrazer.com\nmod-v1 by Holger Hummel - www.celluloid-vfx.com"}
}
 Input {
  inputs 0
  name TEXTURE
  xpos 1874
  ypos -423
  number 1
 }
 Dot {
  name Dot2
  xpos 1908
  ypos -118
 }
set Nf38dd500 [stack 0]
 Input {
  inputs 0
  name ALPHA
  xpos 1249
  ypos -506
 }
 Dot {
  name Dot4
  xpos 1283
  ypos -413
 }
set Nf38dce00 [stack 0]
 Dot {
  name Dot3
  xpos 1550
  ypos -370
 }
set Nf38dca80 [stack 0]
 Dot {
  name Dot1
  xpos 1748
  ypos -370
 }
 Shuffle {
  red black
  green black
  blue black
  alpha black
  name Shuffle10
  xpos 1714
  ypos -255
 }
 Noise {
  cliptype none
  size {{"\[value FractalBlur_UserGrainSize]" i}}
  zoffset {{"\[value FractalBlur_UserGrainEvolve]" i}}
  center {1024 778}
  name Noise1
  xpos 1714
  ypos -166
 }
set Nf38dc000 [stack 0]
 Switch {
  inputs 2
  which {{"\[exists parent.input1]"}}
  name Switch3
  xpos 1714
  ypos -122
 }
 Invert {
  name Invert4
  xpos 1714
  ypos -72
 }
push $Nf38dca80
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle1
  xpos 1516
  ypos -333
 }
 Blur {
  size {{"\[value FractalBlur_UserDilate]" i x101 0}}
  name Blur1
  xpos 1516
  ypos -283
 }
 FilterErode {
  channels rgba
  size {{"(-\[value FractalBlur_UserDilate])/2" i x1 0}}
  filter gaussian
  name FilterErode7
  xpos 1516
  ypos -216
 }
 Dot {
  name Dot10
  xpos 1550
  ypos -133
 }
set Nf3e66700 [stack 0]
 Merge2 {
  inputs 2
  operation minus
  name Merge2
  xpos 1660
  ypos -6
 }
 Invert {
  name Invert3
  xpos 1660
  ypos 37
 }
push $Nf3e66700
 Merge2 {
  inputs 2
  operation multiply
  name Merge13
  xpos 1516
  ypos 72
 }
set N331c3c00 [stack 0]
 Clamp {
  name Clamp1
  xpos 1408
  ypos 116
 }
 Grade {
  channels rgba
  blackpoint {{FractalBlur_UserThreshold i}}
  whitepoint {{FractalBlur_UserThreshold i}}
  name Grade1
  xpos 1408
  ypos 195
 }
push $N331c3c00
 Switch {
  inputs 2
  which {{FractalBlur_UserBlackWhite i x47 1}}
  name Switch1
  xpos 1516
  ypos 249
 }
 Grade {
  channels rgba
  blackpoint {{FractalBlur_UserContrast}}
  whitepoint {{1-FractalBlur_UserContrast}}
  gamma {{FractalBlur_UserGamma x101 0.985}}
  black_clamp false
  name Grade5
  xpos 1516
  ypos 329
 }
set N331c2e00 [stack 0]
 Clamp {
  name Clamp2
  xpos 1426
  ypos 394
 }
push $N331c2e00
 Switch {
  inputs 2
  which {{FractalBlur_UserBW x47 0}}
  name Switch2
  xpos 1516
  ypos 466
 }
 Dot {
  name Dot6
  xpos 1550
  ypos 545
 }
set N331c2380 [stack 0]
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  xpos 1516
  ypos 619
 }
push $N331c2380
push $Nf38dce00
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos 1249
  ypos 575
 }
 Dot {
  name Dot5
  xpos 1283
  ypos 636
 }
 Switch {
  inputs 2
  which {{parent.output}}
  name Switch5
  xpos 1516
  ypos 751
 }
 Output {
  name Output1
  xpos 1516
  ypos 851
 }
push $Nf38dd500
push $Nf38dc000
 Switch {
  inputs 2
  which {{parent.altInput}}
  name Switch4
  xpos 1874
  ypos -65
 }
end_group
ColorCorrect {
 channels all
 contrast 2.4
 gain 2.14
 name ColorCorrect3
 selected true
 xpos 23174
 ypos -3014
}
Blur {
 size 30
 name Blur11
 selected true
 xpos 23174
 ypos -2966
}
Dot {
 name Dot36
 selected true
 xpos 23208
 ypos -2860
}
set N331f2380 [stack 0]
Dot {
 name Dot37
 selected true
 xpos 23318
 ypos -2860
}
Dot {
 name Dot38
 selected true
 xpos 23318
 ypos -2524
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup Bezier1 512 bezier
     {{cc
       {f 8192}
       {px
        {1 x42700000}
        {{{x40bf4c00 0 1 xbd8a15b2 1}
       {x40000000 xbd8a15b2 1 0 1}}
      {{x40b9fc00 0 1 xbd845271 1}
       {x40000000 xbd845271 1 0 1}}}
        {{{x44974406 0 1 xc1b94731 1}
       {x44e3ffff xc1b94731 1 0 1}}
      {{x44a663ad 0 1 xc0d00204 1}
       {x448d0001 xc0d00204 1 0 1}}}
        {{{xc0bf4c00 0 1 x3d8a15b2 1}
       {xc0000000 x3d8a15b2 1 0 1}}
      {{xc0b9fc00 0 1 x3d845271 1}
       {xc0000000 x3d845271 1 0 1}}}
        {{{x42a41280 0 1 xbf6cdd87 1}
       {x41db918f xbf6cdd87 1 0 1}}
      {{x425e5b00 0 1 xbf1e32ca 1}
       {x4199085c xbf1e32ca 1 0 1}}}
        {{{x44446c0c 0 1 xc192fb41 1}
       {x44d24000 xc192fb41 1 0 1}}
      {{x44943a11 0 1 xc09c51d5 1}
       {x4486c000 xc09c51d5 1 0 1}}}
        {{{xc2a41280 0 1 x3f6cdd88 1}
       {xc1db918e x3f6cdd88 1 0 1}}
      {{xc25e5b40 0 1 x3f1e330e 1}
       {xc199085e x3f1e330e 1 0 1}}}
        {{{x4198f900 0 1 xbe5cd7ec 1}
       {x40ccb5e4 xbe5cd7ec 1 0 1}}
      {{x43252ab0 0 1 xbfeb0586 1}
       {x42635891 xbfeb0586 1 0 1}}}
        {{{x435fc170 0 1 xc1408eb8 1}
       {x44babfff xc1408eb8 1 0 1}}
      {{x4425af01 0 1 x3f6e0fbb 1}
       {x44608000 x3f6e0fbb 1 0 1}}}
        {{{xc198f800 0 1 x3e5cd5cb 1}
       {xc0ccb5d2 x3e5cd5cb 1 0 1}}
      {{xc3252ab0 0 1 x3feb0586 1}
       {xc2635891 x3feb0586 1 0 1}}}
        {{{xc3897e70 0 1 x40467ec8 1}
       {xc2b80000 x40467ec8 1 0 1}}
      {{x435cdb28 0 1 xc01d21cc 1}
       {x42980000 xc01d21cc 1 0 1}}}
        {{{x440a22ec 0 1 xc17be3f1 1}
       {x44c87fff xc17be3f1 1 0 1}}
      {{xc2c54686 0 1 x41164d42 1}
       {x441effff x41164d42 1 0 1}}}
        {{{x43897e80 0 1 xc0467eea 1}
       {x42b80000 xc0467eea 1 0 1}}
      {{xc35cdb20 0 1 x401d21c3 1}
       {xc2980000 x401d21c3 1 0 1}}}
        {{{xc3d43810 0 1 x40992fcc 1}
       {xc30e0000 x40992fcc 1 0 1}}
      {{xc2ffba50 0 1 x3fb5f127 1}
       {xc2300000 x3fb5f127 1 0 1}}}
        {{{x44b527e2 0 1 xc1ceda8f 1}
       {x44ee0000 xc1ceda8f 1 0 1}}
      {{xc373f003 0 1 x41302555 1}
       {x44128000 x41302555 1 0 1}}}
        {{{x43d43810 0 1 xc0992fcc 1}
       {x430e0000 xc0992fcc 1 0 1}}
      {{x42ffba60 0 1 xbfb5f138 1}
       {x42300000 xbfb5f138 1 0 1}}}
        {{{xc30f78e0 0 1 x3fcf2045 1}
       {xc2400000 x3fcf2045 1 0 1}}
      {{xc3a88c48 0 1 x406fd538 1}
       {xc2e80000 x406fd538 1 0 1}}}
        {{{x451fb2d3 0 1 xc2195209 1}
       {x450e2000 xc2195209 1 0 1}}
      {{x438e7a2a 0 1 x40a42598 1}
       {x44400000 x40a42598 1 0 1}}}
        {{{x430f78e0 0 1 xbfcf2045 1}
       {x42400000 xbfcf2045 1 0 1}}
      {{x43a88c48 0 1 xc06fd538 1}
       {x42e80000 xc06fd538 1 0 1}}}
        {{{x43097e80 0 1 xbfc67eea 1}
       {x42380000 xbfc67eea 1 0 1}}
      {{xc38e64e0 0 1 x404a9e1a 1}
       {xc2c40000 x404a9e1a 1 0 1}}}
        {{{x452d2627 0 1 xc223078b 1}
       {x4512a000 xc223078b 1 0 1}}
      {{x447fc505 0 1 xc044db98 1}
       {x447f8000 xc044db98 1 0 1}}}
        {{{xc3097e80 0 1 x3fc67eea 1}
       {xc2380000 x3fc67eea 1 0 1}}
      {{x438e64e0 0 1 xc04a9e1a 1}
       {x42c40000 xc04a9e1a 1 0 1}}}
        {{{x43150d40 0 1 xbfd72e56 1}
       {x42477791 xbfd72e56 1 0 1}}
      {{xc1eb6a80 0 1 x3ea77dd2 1}
       {xc1220505 x3ea77dd2 1 0 1}}}
        {{{x45070a0d 0 1 xc2078543 1}
       {x4505e000 xc2078543 1 0 1}}
      {{x44a5a9af 0 1 xc0cdf0b6 1}
       {x448cc000 xc0cdf0b6 1 0 1}}}
        {{{xc3150d20 0 1 x3fd72e10 1}
       {xc2477792 x3fd72e10 1 0 1}}
      {{x41eb6a00 0 1 xbea77d52 1}
       {x412204f0 xbea77d52 1 0 1}}}}}     idem}
     {tx x42700000 x44f05000 x446c2000}
     {a osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 ltn x42700000 ltm x42700000 tt x40800000}}}}}}
 toolbox {selectCurves {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { selectCurves str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 lifetime_start 60
 lifetime_end 60
 motionblur_shutter_offset_type centred
 source_black_outside true
 name Roto19
 selected true
 xpos 22844
 ypos -3062
}
Blur {
 size 53
 name Blur28
 selected true
 xpos 22844
 ypos -3014
}
Dot {
 name Dot39
 label "Input Matte\nDappled Light Shapes or \nAreas/Pools of Light on Char"
 selected true
 xpos 22878
 ypos -2860
}
set N33219180 [stack 0]
Dot {
 name Dot45
 selected true
 xpos 22878
 ypos -2620
}
set N33218e00 [stack 0]
Dot {
 name Dot56
 selected true
 xpos 22878
 ypos -2524
}
push $N33218e00
push $N33219180
Dot {
 name Dot59
 selected true
 xpos 23098
 ypos -2860
}
EdgeDetectWrapper {
 channels rgba
 erodesize -10
 name EdgeDetect2
 selected true
 xpos 23064
 ypos -2822
}
FilterErode {
 channels all
 size -37
 filter gaussian
 name FilterErode7
 selected true
 xpos 23064
 ypos -2774
}
Dot {
 name Dot60
 selected true
 xpos 23098
 ypos -2716
}
push $N331f2380
Merge2 {
 inputs 2
 operation mask
 name Merge24
 selected true
 xpos 23174
 ypos -2720
}
ChannelMerge {
 inputs 2
 name ChannelMerge7
 selected true
 xpos 23174
 ypos -2637
}
Switch {
 inputs 3
 name Switch2
 label "\[value which]"
 selected true
 xpos 23174
 ypos -2534
}
Copy {
 inputs 2
 from0 rgba.alpha
 to0 -rgba.alpha
 channels distort01
 name Copy6
 selected true
 xpos 23174
 ypos -2445
}
IDistort {
 uv {distort01.red -distort01.green}
 uv_scale 0
 name IDistort2
 selected true
 xpos 23174
 ypos -2342
}
Merge2 {
 inputs 2
 operation mask
 name Merge27
 selected true
 xpos 23174
 ypos -2000
 disable true
}
Dot {
 name Dot61
 note_font_size 41
 selected true
 xpos 23208
 ypos -1804
}
push $Neb46bc00
Dot {
 name Dot62
 selected true
 xpos 23648
 ypos -3436
}
Merge2 {
 inputs 2
 operation mask
 name Merge29
 selected true
 xpos 23614
 ypos -1808
}
Dot {
 name Dot63
 selected true
 xpos 23648
 ypos -1612
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097664}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup BSpline1 512 bspline
     {{cc
       {f 8192}
       {px x41980000
        {{a t
       {{x41980000 1 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{xc3e40000 -}}
      {{x44c08000 -}}}
        {{a t
       {{x41980000 x3f808312 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x446c0000 -}}
      {{x44c6c000 -}}}
        {{a t
       {{x41980000 x3f8b4396 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x448f8000 -}}
      {{x44e94000 -}}}
        {{a t
       {{x41980000 x3f92f1aa -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44a2c000 -}}
      {{x44f4c000 -}}}
        {{a t
       {{x41980000 x3f87ae14 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44c00000 -}}
      {{x44f50000 -}}}
        {{a t
       {{x41980000 x3f93f7cf -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44cfc000 xc1cbffee 1 0 1}}
      {{x44e68000 xc1b457c0 1 0 1}}}
        {{a t
       {{x41980000 x3f841893 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44d70a24 -}}
      {{x448fd622 -}}}
        {{a t
       {{x41980000 x3f7ae148 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44d04000 -}}
      {{x43c20000 -}}}
        {{a t
       {{x41980000 x3f851eb8 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44d54000 -}}
      {{x42480000 -}}}
        {{a t
       {{x41980000 x3f89ba5e -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44e44000 -}}
      {{xc2800000 -}}}
        {{a t
       {{x41980000 x3f8a3d71 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x45221c87 -}}
      {{xc14cdd80 -}}}
        {{a t
       {{x41980000 1 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x451288bb -}}
      {{x4329ecd4 -}}}
        {{a t
       {{x41980000 x3f8624dd -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x450f7889 -}}
      {{x44976b10 -}}}
        {{a t
       {{x41980000 x3f8624dd -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x45104000 x40f8afb7 1 0 1}}
      {{x44c34000 xbef8adb7 1 0 1}}}
        {{a t
       {{x41980000 x3f818937 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x45152000 x41f2db80 1 0 1}}
      {{x44e18000 xc1b2be2e 1 0 1}}}
        {{a t
       {{x41980000 x3fa24dd3 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x45194000 -}}
      {{x44fa0000 -}}}
        {{a t
       {{x41980000 x3fa2d0e6 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x4538e000 -}}
      {{x45082000 -}}}
        {{a t
       {{x41980000 x3fd0624e -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x45682000 -}}
      {{x44fdc000 -}}}
        {{a t
       {{x41980000 x3f9a9fbe -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x45889000 -}}
      {{x44a40000 -}}}
        {{a t
       {{x41980000 x3ec8b438 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x458cc000 -}}
      {{x43ef0000 -}}}
        {{a t
       {{x41980000 x3f428f5c -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x455c6000 -}}
      {{xc3280000 -}}}
        {{a t
       {{x41980000 0 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x452be000 -}}
      {{xc3890000 -}}}
        {{a t
       {{x41980000 x3f49ba5e -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x44c34000 -}}
      {{xc3a90000 -}}}
        {{a t
       {{x41980000 x3ecccccc -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x447f0000 -}}
      {{xc3860000 -}}}
        {{a t
       {{x41980000 x3f4ac083 -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{x43920000 -}}
      {{x40800000 -}}}
        {{a t
       {{x41980000 x3f71a9fc -}}	 rp
       {{x41980000 1 -}}	 te
       {{x41980000 x40800000 -}}}
      {{xc3b10000 xc20edb72 1 0 1}}
      {{x44570000 xc14db6db 1 0 1}}}}}     idem}
     {tx x41980000 x44f46762 x446f3627}
     {a osw x41200000 osf 0 str 1 spx x44c16000 spy x44220000 sb 1 ltn x41980000 ltm x41980000 tt x40c00000}}}}}}
 toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 tt 6 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 colorOverlay {0 0 0 0}
 lifetime_type "all frames"
 lifetime_start 19
 lifetime_end 19
 motionblur_shutter_offset_type centred
 source_black_outside true
 name Roto5
 selected true
 xpos 24237
 ypos -3746
}
Blur {
 size 200
 name Blur12
 selected true
 xpos 24237
 ypos -3708
}
Ramp {
 inputs 0
 p0 {1547 1496}
 p1 {{p0.x x1 1532} 232}
 name lighting_ramp_0
 selected true
 xpos 23834
 ypos -4544
}
Dot {
 name lighting_ramp_input_1
 label "\[value name]"
 selected true
 xpos 23868
 ypos -4455
}
Multiply {
 name Multiply3
 label "\[value value]"
 selected true
 xpos 23834
 ypos -4413
}
push $Nf3e3bc00
ColorCorrect {
 inputs 1+1
 gain 0
 shadows 0
 midtones 0
 highlights 0
 name ColorCorrect2
 onCreate "node = nuke.thisNode()\nknobs = node.knobs().keys()\nwhitelist = \['label']\nextra = \[]\n\nknobs = knobs + extra\n\nfor knob in knobs:\n    node\[knob].setEnabled(False)\n    if knob in whitelist:\n        node\[knob].setEnabled(True)"
 label "Shadow\nDONT CHANGE"
 selected true
 xpos 24054
 ypos -4413
}
Grade {
 white 0
 unpremult -rgba.alpha
 mix 0.6
 name Grade6
 onCreate "node = nuke.thisNode()\nknobs = node.knobs().keys()\nwhitelist = \['mix', 'channels']\nextra = \['mix_luminance']\n\nknobs = knobs + extra\n\nfor knob in knobs:\n    node\[knob].setEnabled(False)\n    if knob in whitelist:\n        node\[knob].setEnabled(True)\n    \n"
 label "\[value mix]"
 selected true
 xpos 24054
 ypos -4022
}
ColorCorrect {
 inputs 1+1
 gain 0.54
 name ColorCorrect5
 selected true
 xpos 24035
 ypos -3702
}
Merge2 {
 inputs 2
 name Merge28
 selected true
 xpos 24054
 ypos -1616
 disable true
}
Merge2 {
 inputs 2
 name Merge30
 selected true
 xpos 24054
 ypos 208
}
PSDMerge {
 inputs 2
 name PSDMerge4
 note_font "Bitstream Vera Sans"
 selected true
 xpos 24054
 ypos 2129
 operation overlay
 maskChannelInput none
}
Group {
 name PS_Levels
 help "PAF_PS_Levels\nPedro A. Flores\nwww.creativerocket.net\n\n- This is a simple gizmos that imitates the levels tool in photoshop.\n\n- Each RGBA channel is extracted from the image. The we apply a histogram to each, then we put them back together to rebuild the image. A final histogram is used to set the master level.\n"
 tile_color 0x2dccffff
 gl_color 0x2dccffff
 label "PAF 4/10 v01"
 note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
 selected true
 xpos 24054
 ypos 2219
 disable true
 addUserKnob {20 MasterChan l "Master RGB"}
 addUserKnob {41 hist l Histogram T Master.hist}
 addUserKnob {41 in l "input range" T Master.in}
 addUserKnob {41 out l "output range" T Master.out}
 addUserKnob {26 "" l mask}
 addUserKnob {41 unpremult l "(un)premult by" T Master.unpremult}
 addUserKnob {41 invert_unpremult l invert T Master.invert_unpremult}
 addUserKnob {41 mix T Master.mix}
 addUserKnob {20 RedChan l Red}
 addUserKnob {41 hist_1 l Histogram T Red_Chan.hist}
 addUserKnob {41 in_1 l "input range" T Red_Chan.in}
 addUserKnob {41 out_1 l "output range" T Red_Chan.out}
 addUserKnob {20 GreenChan l Green}
 addUserKnob {41 hist_2 l Histogram T Green_Chan.hist}
 addUserKnob {41 in_2 l "input range" T Green_Chan.in}
 addUserKnob {41 out_2 l "output range" T Green_Chan.out}
 addUserKnob {20 BlueChan l Blue t "Color correct Levels on blue chan"}
 addUserKnob {41 hist_3 l Histogram T Blue_Chan.hist}
 addUserKnob {41 in_3 l "input range" T Blue_Chan.in}
 addUserKnob {41 out_3 l "output range" T Blue_Chan.out}
}
 Input {
  inputs 0
  name Input1
  xpos 647
  ypos -369
 }
 Dot {
  name Dot6
  xpos 681
  ypos -260
 }
set N8b597880 [stack 0]
 Dot {
  name Dot1
  xpos 681
  ypos -155
 }
set N8b597500 [stack 0]
 Dot {
  name Dot2
  xpos 572
  ypos -155
 }
set N8b597180 [stack 0]
 Dot {
  name Dot3
  xpos 457
  ypos -155
 }
 Shuffle {
  red blue
  green blue
  name Blue
  tile_color 0xffff
  label "\[value in]"
  xpos 423
  ypos 7
 }
 Histogram {
  maskChannelInput {{{parent.Master.maskChannelInput}}}
  inject {{parent.Master.inject}}
  invert_mask {{parent.Master.invert_mask}}
  fringe {{parent.Master.fringe}}
  unpremult {{{parent.Master.unpremult}}}
  invert_unpremult {{parent.Master.invert_unpremult}}
  mix {{parent.Master.mix}}
  name Blue_Chan
  xpos 423
  ypos 54
 }
push $N8b597180
 Shuffle {
  red green
  blue green
  name Green
  tile_color 0xff00ff
  label "\[value in]"
  xpos 538
  ypos -55
 }
 Histogram {
  maskChannelInput {{{parent.Master.maskChannelInput}}}
  inject {{parent.Master.inject i}}
  invert_mask {{parent.Master.invert_mask i}}
  fringe {{parent.Master.fringe i}}
  unpremult {{{parent.Master.unpremult}}}
  invert_unpremult {{parent.Master.invert_unpremult i}}
  mix {{parent.Master.mix i}}
  name Green_Chan
  xpos 538
  ypos -15
 }
push $N8b597500
 Shuffle {
  green red
  blue red
  name Red
  tile_color 0xff0000ff
  label "\[value in]"
  xpos 647
  ypos -123
 }
 Histogram {
  maskChannelInput {{{parent.Master.maskChannelInput}}}
  inject {{parent.Master.inject i}}
  invert_mask {{parent.Master.invert_mask i}}
  fringe {{parent.Master.fringe i}}
  unpremult {{{parent.Master.unpremult}}}
  invert_unpremult {{parent.Master.invert_unpremult i}}
  mix {{parent.Master.mix i}}
  name Red_Chan
  xpos 647
  ypos -89
 }
push $N8b597880
 Dot {
  name Dot5
  xpos 790
  ypos -260
 }
 Copy {
  inputs 2
  from0 rgba.red
  to0 rgba.red
  name Set_Red
  tile_color 0xff0000ff
  xpos 754
  ypos -94
 }
 Copy {
  inputs 2
  from0 rgba.green
  to0 rgba.green
  name Set_Green
  tile_color 0xff00ff
  xpos 754
  ypos -20
 }
 Copy {
  inputs 2
  from0 rgba.blue
  to0 rgba.blue
  name Set_Blue
  tile_color 0xffff
  xpos 754
  ypos 49
 }
 Histogram {
  in {0 1.258925412 1}
  name Master
  xpos 754
  ypos 111
 }
 Output {
  name Output1
  xpos 756
  ypos 231
 }
end_group
push 0
Merge2 {
 inputs 2+1
 name Merge31
 selected true
 xpos 24054
 ypos 2566
}
Dot {
 name lighting_output_1
 label "\[value name]"
 selected true
 xpos 24088
 ypos 2804
}
Dot {
 name Dot64
 selected true
 xpos 25096
 ypos 2804
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0190/publish/image/image03_LIGHT/v001/kensukes_kingdom_q0350_c0190_image03_LIGHT_v001.png
 origset true
 name LoadImage_png12
 tile_color 0x4ecd25ff
 selected true
 xpos 24522
 ypos -9259
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name image03_LIGHT
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0190
 addUserKnob {26 avalon:loader l loader T LoadImage}
 addUserKnob {26 avalon:representation l representation T 622a1a44d38c903b7b6366fe}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0190/work/background/kensukes_kingdom_q0350_c0190_background_v002.psd"}
 addUserKnob {26 avalon:version l version T 1}
 addUserKnob {26 avalon:objectName l objectName T LoadImage_png}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T obliv}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 1}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Dot {
 name Dot66
 selected true
 xpos 24477
 ypos -8981
}
set N8b3d7180 [stack 0]
Dot {
 name Dot69
 selected true
 xpos 24367
 ypos -8981
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0190/publish/image/image02_unlit_tmp/v001/kensukes_kingdom_q0350_c0190_image02_unlit_tmp_v001.png
 origset true
 name LoadImage_png13
 tile_color 0x4ecd25ff
 selected true
 xpos 25323
 ypos -9543
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name image02_unlit_tmp
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0190
 addUserKnob {26 avalon:loader l loader T LoadImage}
 addUserKnob {26 avalon:representation l representation T 622a1a45d38c903b7b636704}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0190/work/background/kensukes_kingdom_q0350_c0190_background_v002.psd"}
 addUserKnob {26 avalon:version l version T 1}
 addUserKnob {26 avalon:objectName l objectName T LoadImage_png}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T obliv}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 1}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Dot {
 name Dot21
 selected true
 xpos 25357
 ypos -8981
}
Read {
 inputs 0
 file "Y:/kensukes_kingdom/library/effectsfootage/2d/01. Atmospheres/Atmosphere_06.mov"
 format "2048 1152 0 0 2048 1152 1 "
 last 301
 frame_mode offset
 frame 200.000000
 origlast 301
 origset true
 name Read8
 selected true
 xpos 25920
 ypos -9372
}
Kronos {
 input.last 301
 retimedChannels all
 timingOutputSpeed 0.2
 showLegacyMode false
 motionEstimation Regularized
 legacyModeNuke9 false
 name Kronos1
 selected true
 xpos 25920
 ypos -9286
}
Transform {
 translate {1982 1346}
 scale 3.5
 center {1024 576}
 name Transform10
 selected true
 xpos 25920
 ypos -9225
}
FrameHold {
 first_frame 1
 increment 2
 name FrameHold2
 selected true
 xpos 25920
 ypos -9199
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0190/publish/image/image01_BG/v001/kensukes_kingdom_q0350_c0190_image01_BG_v001.png
 origset true
 name LoadImage_png14
 tile_color 0x4ecd25ff
 selected true
 xpos 25653
 ypos -9662
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name image01_BG
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0190
 addUserKnob {26 avalon:loader l loader T LoadImage}
 addUserKnob {26 avalon:representation l representation T 622a1a47d38c903b7b63670a}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0190/work/background/kensukes_kingdom_q0350_c0190_background_v002.psd"}
 addUserKnob {26 avalon:version l version T 1}
 addUserKnob {26 avalon:objectName l objectName T LoadImage_png}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T obliv}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 1}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Merge2 {
 inputs 2
 mix 0.5
 name Merge25
 selected true
 xpos 25653
 ypos -9195
}
Shuffle {
 alpha white
 name Shuffle6
 selected true
 xpos 25653
 ypos -9081
}
PSDMerge {
 inputs 2
 name PSDMerge2
 note_font "Bitstream Vera Sans"
 selected true
 xpos 25653
 ypos -8984
 maskChannelInput -rgba.alpha
}
Dot {
 name Dot72
 selected true
 xpos 25687
 ypos -8837
}
set N8b3d6a80 [stack 0]
PSDMerge {
 inputs 2
 name PSDMerge5
 note_font "Bitstream Vera Sans"
 selected true
 xpos 24333
 ypos -8840
 maskChannelInput -rgba.alpha
}
Dot {
 name Dot73
 selected true
 xpos 22937
 ypos -8837
}
set Na96e1180 [stack 0]
Dot {
 name Dot75
 selected true
 xpos 21617
 ypos -8837
}
set Na96e0e00 [stack 0]
Dot {
 name Dot76
 selected true
 xpos 20297
 ypos -8837
}
Dot {
 name Dot77
 selected true
 xpos 20297
 ypos -8069
}
ColorCorrect {
 saturation 0
 contrast 3.25
 name ColorCorrect4
 selected true
 xpos 20813
 ypos -8073
}
Invert {
 name Invert2
 selected true
 xpos 20813
 ypos -8031
}
Blur {
 size 3.1
 name Blur13
 selected true
 xpos 20813
 ypos -7983
}
Dot {
 name Dot78
 selected true
 xpos 20847
 ypos -7925
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 name Roto7
 selected true
 xpos 21033
 ypos -8319
}
Dot {
 inputs 0
 name Dot79
 label "Character\nBeauty"
 note_font_size 21
 selected true
 xpos 20627
 ypos -9029
}
Dot {
 name Dot80
 label "Character Shape\n"
 note_font_size 31
 selected true
 xpos 20627
 ypos -8549
}
Dot {
 name Dot81
 selected true
 xpos 20957
 ypos -8549
}
set N921d0a80 [stack 0]
Dot {
 name Dot82
 selected true
 xpos 21287
 ypos -8549
}
Transform {
 center {1547 648}
 name Transform5
 selected true
 xpos 21253
 ypos -8505
}
CornerPin2D {
 to1 {0 0}
 to2 {3094 0}
 to3 {3094 1296}
 to4 {0 1296}
 invert false
 from1 {0 0}
 from2 {3094 0}
 from3 {3094 1296}
 from4 {0 1296}
 name CornerPin2D2
 selected true
 xpos 21253
 ypos -8457
}
Crop {
 box {0 0 3094 1296}
 name Crop3
 selected true
 xpos 21253
 ypos -8409
}
Merge2 {
 inputs 2
 operation mask
 name Merge32
 selected true
 xpos 21253
 ypos -8313
}
Dot {
 name Dot83
 selected true
 xpos 21287
 ypos -8261
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 name Roto10
 selected true
 xpos 20813
 ypos -8367
}
push $N921d0a80
Transform {
 center {1547 648}
 name Transform12
 selected true
 xpos 20923
 ypos -8505
}
Merge2 {
 inputs 2
 operation mask
 name Merge33
 selected true
 xpos 20923
 ypos -8361
}
ChannelMerge {
 inputs 2
 name ChannelMerge2
 selected true
 xpos 20923
 ypos -8278
}
ShuffleCopy {
 inputs 2
 red red
 green green
 blue blue
 out distort01
 name ShuffleCopy2
 selected true
 xpos 20923
 ypos -7929
}
set N92214380 [stack 0]
Dot {
 name Dot84
 selected true
 xpos 21067
 ypos -7925
}
Dot {
 name Dot85
 selected true
 xpos 21067
 ypos -7781
}
push $N92214380
IDistort {
 uv distort01
 uv_scale 0.6
 name IDistort3
 selected true
 xpos 20923
 ypos -7887
}
Blur {
 size 5.6
 name Blur15
 selected true
 xpos 20923
 ypos -7839
}
Merge2 {
 inputs 2
 name Merge34
 selected true
 xpos 20923
 ypos -7785
}
Merge2 {
 name Merge35
 selected true
 xpos 20923
 ypos -7545
 disable true
}
Blur {
 name Blur18
 selected true
 xpos 20923
 ypos -7359
}
Dot {
 name Dot87
 selected true
 xpos 20957
 ypos -6773
}
push $Na96e0e00
Dot {
 name Dot88
 selected true
 xpos 21617
 ypos -8069
}
ColorCorrect {
 saturation 0
 contrast 3.25
 name ColorCorrect6
 selected true
 xpos 22133
 ypos -8073
}
Invert {
 name Invert1
 selected true
 xpos 22133
 ypos -8031
}
Blur {
 size 3.1
 name Blur21
 selected true
 xpos 22133
 ypos -7983
}
Dot {
 name Dot89
 selected true
 xpos 22167
 ypos -7925
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 name Roto11
 selected true
 xpos 22353
 ypos -8319
}
Dot {
 inputs 0
 name Dot90
 label "Character\nBeauty"
 note_font_size 21
 selected true
 xpos 21947
 ypos -9029
}
Dot {
 name Dot91
 label "Character Shape\n"
 note_font_size 31
 selected true
 xpos 21947
 ypos -8549
}
Dot {
 name Dot92
 selected true
 xpos 22277
 ypos -8549
}
set N878d2700 [stack 0]
Dot {
 name Dot94
 selected true
 xpos 22607
 ypos -8549
}
Transform {
 center {1547 648}
 name Transform13
 selected true
 xpos 22573
 ypos -8505
}
CornerPin2D {
 to1 {0 0}
 to2 {3094 0}
 to3 {3094 1296}
 to4 {0 1296}
 invert false
 from1 {0 0}
 from2 {3094 0}
 from3 {3094 1296}
 from4 {0 1296}
 name CornerPin2D1
 selected true
 xpos 22573
 ypos -8457
}
Crop {
 box {0 0 3094 1296}
 name Crop1
 selected true
 xpos 22573
 ypos -8409
}
Merge2 {
 inputs 2
 operation mask
 name Merge36
 selected true
 xpos 22573
 ypos -8313
}
Dot {
 name Dot95
 selected true
 xpos 22607
 ypos -8261
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 name Roto12
 selected true
 xpos 22133
 ypos -8367
}
push $N878d2700
Transform {
 center {1547 648}
 name Transform14
 selected true
 xpos 22243
 ypos -8505
}
Merge2 {
 inputs 2
 operation mask
 name Merge37
 selected true
 xpos 22243
 ypos -8361
}
ChannelMerge {
 inputs 2
 name ChannelMerge3
 selected true
 xpos 22243
 ypos -8278
}
ShuffleCopy {
 inputs 2
 red red
 green green
 blue blue
 out distort01
 name ShuffleCopy1
 selected true
 xpos 22243
 ypos -7929
}
set N8737a000 [stack 0]
Dot {
 name Dot96
 selected true
 xpos 22387
 ypos -7925
}
Dot {
 name Dot97
 selected true
 xpos 22387
 ypos -7781
}
push $N8737a000
IDistort {
 uv distort01
 uv_scale 0.6
 name IDistort4
 selected true
 xpos 22243
 ypos -7887
}
Blur {
 size 5.6
 name Blur22
 selected true
 xpos 22243
 ypos -7839
}
Merge2 {
 inputs 2
 name Merge38
 selected true
 xpos 22243
 ypos -7785
}
Merge2 {
 name Merge39
 selected true
 xpos 22243
 ypos -7545
 disable true
}
Blur {
 name Blur23
 selected true
 xpos 22243
 ypos -7359
}
Dot {
 name Dot98
 selected true
 xpos 22277
 ypos -6965
}
push $Na96e1180
Dot {
 name Dot99
 selected true
 xpos 22937
 ypos -8069
}
ColorCorrect {
 saturation 0
 contrast 3.25
 name ColorCorrect10
 selected true
 xpos 23453
 ypos -8073
}
Invert {
 name Invert5
 selected true
 xpos 23453
 ypos -8031
}
Blur {
 size 3.1
 name Blur24
 selected true
 xpos 23453
 ypos -7983
}
Dot {
 name Dot100
 selected true
 xpos 23487
 ypos -7925
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 name Roto13
 selected true
 xpos 23673
 ypos -8319
}
Dot {
 inputs 0
 name Dot101
 label "Character\nBeauty"
 note_font_size 21
 selected true
 xpos 23267
 ypos -9029
}
Dot {
 name Dot102
 label "Character Shape\n"
 note_font_size 31
 selected true
 xpos 23267
 ypos -8549
}
Dot {
 name Dot103
 selected true
 xpos 23597
 ypos -8549
}
set N868bc380 [stack 0]
Dot {
 name Dot104
 selected true
 xpos 23927
 ypos -8549
}
Transform {
 center {1547 648}
 name Transform15
 selected true
 xpos 23893
 ypos -8505
}
CornerPin2D {
 to1 {0 0}
 to2 {3094 0}
 to3 {3094 1296}
 to4 {0 1296}
 invert false
 from1 {0 0}
 from2 {3094 0}
 from3 {3094 1296}
 from4 {0 1296}
 name CornerPin2D4
 selected true
 xpos 23893
 ypos -8457
}
Crop {
 box {0 0 3094 1296}
 name Crop4
 selected true
 xpos 23893
 ypos -8409
}
Merge2 {
 inputs 2
 operation mask
 name Merge40
 selected true
 xpos 23893
 ypos -8313
}
Dot {
 name Dot105
 selected true
 xpos 23927
 ypos -8261
}
Roto {
 inputs 0
 output alpha
 curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x44c16000 x44220000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
 toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
 toolbar_brush_hardness 0.200000003
 toolbar_source_transform_scale {1 1}
 toolbar_source_transform_center {1547 648}
 name Roto14
 selected true
 xpos 23453
 ypos -8367
}
push $N868bc380
Transform {
 center {1547 648}
 name Transform16
 selected true
 xpos 23563
 ypos -8505
}
Merge2 {
 inputs 2
 operation mask
 name Merge41
 selected true
 xpos 23563
 ypos -8361
}
ChannelMerge {
 inputs 2
 name ChannelMerge5
 selected true
 xpos 23563
 ypos -8278
}
ShuffleCopy {
 inputs 2
 red red
 green green
 blue blue
 out distort01
 name ShuffleCopy3
 selected true
 xpos 23563
 ypos -7929
}
set N68effc00 [stack 0]
Dot {
 name Dot106
 selected true
 xpos 23707
 ypos -7925
}
Dot {
 name Dot107
 selected true
 xpos 23707
 ypos -7781
}
push $N68effc00
IDistort {
 uv distort01
 uv_scale 0.6
 name IDistort6
 selected true
 xpos 23563
 ypos -7887
}
Blur {
 size 5.6
 name Blur25
 selected true
 xpos 23563
 ypos -7839
}
Merge2 {
 inputs 2
 name Merge42
 selected true
 xpos 23563
 ypos -7785
}
Merge2 {
 name Merge43
 selected true
 xpos 23563
 ypos -7545
 disable true
}
Blur {
 name Blur26
 selected true
 xpos 23563
 ypos -7359
}
ChannelMerge {
 inputs 2
 name ChannelMerge6
 selected true
 xpos 23563
 ypos -6982
}
ChannelMerge {
 inputs 2
 name ChannelMerge8
 selected true
 xpos 23563
 ypos -6790
}
Dot {
 name Dot108
 selected true
 xpos 23597
 ypos -6581
}
set N50d7b880 [stack 0]
Dot {
 name Dot109
 selected true
 xpos 23597
 ypos -6293
}
Blur {
 size 30.5
 name Blur29
 selected true
 xpos 24993
 ypos -6303
}
push $N50d7b880
push $N8b3d7180
Dot {
 name Dot110
 selected true
 xpos 24477
 ypos -7109
}
Merge2 {
 inputs 2
 operation stencil
 name Merge44
 selected true
 xpos 24443
 ypos -6585
}
Dot {
 name Dot111
 selected true
 xpos 24477
 ypos -6437
}
push $N8b3d6a80
Dot {
 name Dot112
 selected true
 xpos 25687
 ypos -8213
}
PSDMerge {
 inputs 2
 name PSDMerge9
 note_font "Bitstream Vera Sans"
 selected true
 xpos 25653
 ypos -6440
 maskChannelInput none
}
ColorCorrect {
 inputs 1+1
 name ColorCorrect11
 selected true
 xpos 25653
 ypos -6297
 disable true
}
Merge2 {
 name Merge45
 selected true
 xpos 25651
 ypos -6064
}
Crop {
 box {0 0 5192 2179}
 name Crop5
 selected true
 xpos 25588
 ypos 2551
 disable true
}
Merge2 {
 inputs 2
 name Merge47
 selected true
 xpos 25588
 ypos 2800
}
Reformat {
 format "2578 1080 0 0 2578 1080 1 kensukes_kingdom_end_2"
 resize none
 pbb true
 name Reformat5
 selected true
 xpos 25588
 ypos 3127
}
Read {
 inputs 0
 file Y:/kensukes_kingdom/episodes/film/q0350/q0350_c0220/publish/render/renderCompositingMain/v026/kensukes_kingdom_q0350_c0220_renderCompositingMain_v026.####.exr
 last 46
 frame_mode "start at"
 frame 1.0
 origlast 46
 origset true
 name Read_renderCompositingMain_exr
 tile_color 0x4ecd25ff
 selected true
 xpos 25923
 ypos 2615
 addUserKnob {20 AvalonTab}
 addUserKnob {20 begin l "Avalon data group" n 2}
 addUserKnob {26 __divider__ l "" +STARTLINE}
 addUserKnob {26 avalon_data -STARTLINE T "Warning! Do not change following data!"}
 addUserKnob {1 avalon:name l name}
 avalon:name renderCompositingMain
 addUserKnob {1 avalon:namespace l namespace}
 avalon:namespace q0350_c0220
 addUserKnob {26 avalon:loader l loader T LoadSequence}
 addUserKnob {26 avalon:representation l representation T 6218af77bdcc3a745df787ca}
 addUserKnob {26 avalon:id l id T pyblish.avalon.container}
 addUserKnob {26 avalon:schema l schema T avalon-core:container-2.0}
 addUserKnob {26 avalon:frameStart l frameStart T 1}
 addUserKnob {26 avalon:source l source T "\{root\}/kensukes_kingdom/episodes/film/q0350/q0350_c0220/work/compositing/kensukes_kingdom_q0350_c0220_compositing_v026.nk"}
 addUserKnob {26 avalon:version l version T 26}
 addUserKnob {26 avalon:objectName l objectName T Read_renderCompositingMain_exr}
 addUserKnob {26 avalon:fps l fps T 24.0}
 addUserKnob {26 avalon:author l author T n_mar}
 addUserKnob {26 avalon:handleEnd l handleEnd T 0}
 addUserKnob {26 avalon:handleStart l handleStart T 0}
 addUserKnob {26 avalon:colorspace l colorspace T None}
 addUserKnob {26 avalon:frameEnd l frameEnd T 46}
 addUserKnob {20 end l "Avalon data group" n -1}
}
Viewer {
 inputs 2
 frame 5
 frame_range 1-19
 input_number 1
 colour_sample_bbox {-0.3682380319 -0.1414219439 -0.367851615 -0.1410355419}
 name Viewer2
 selected true
 xpos 25763
 ypos 2213
}
